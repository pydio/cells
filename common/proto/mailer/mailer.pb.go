// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mailer.proto

/*
Package mailer is a generated protocol buffer package.

It is generated from these files:
	mailer.proto

It has these top-level messages:
	User
	Mail
	SendMailRequest
	SendMailResponse
	ConsumeQueueRequest
	ConsumeQueueResponse
*/
package mailer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Uuid     string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=Address" json:"Address,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Language string `protobuf:"bytes,4,opt,name=Language" json:"Language,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *User) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type Mail struct {
	// User object used to compute the From header
	From *User `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	// List of target users to send the mail to
	To []*User `protobuf:"bytes,3,rep,name=To" json:"To,omitempty"`
	// List of target users to put in CC
	Cc []*User `protobuf:"bytes,4,rep,name=Cc" json:"Cc,omitempty"`
	// Date of sending
	DateSent int64 `protobuf:"varint,5,opt,name=DateSent" json:"DateSent,omitempty"`
	// String used as subject for the email
	Subject string `protobuf:"bytes,6,opt,name=Subject" json:"Subject,omitempty"`
	// Plain-text content used for the body, if not set will be generated from the ContentHtml
	ContentPlain string `protobuf:"bytes,7,opt,name=ContentPlain" json:"ContentPlain,omitempty"`
	// HTML content used for the body
	ContentHtml string `protobuf:"bytes,8,opt,name=ContentHtml" json:"ContentHtml,omitempty"`
	// Markdown content used for the body
	ContentMarkdown string `protobuf:"bytes,9,opt,name=ContentMarkdown" json:"ContentMarkdown,omitempty"`
	// List of attachments
	Attachments []string `protobuf:"bytes,10,rep,name=Attachments" json:"Attachments,omitempty"`
	// Not used, could be used to create conversations
	ThreadUuid string `protobuf:"bytes,11,opt,name=ThreadUuid" json:"ThreadUuid,omitempty"`
	// Not used, could be used to create conversations
	ThreadIndex string `protobuf:"bytes,12,opt,name=ThreadIndex" json:"ThreadIndex,omitempty"`
	// Mail Template Id refers to predefined templates
	TemplateId string `protobuf:"bytes,13,opt,name=TemplateId" json:"TemplateId,omitempty"`
	// Key/values to pass to the template
	TemplateData map[string]string `protobuf:"bytes,14,rep,name=TemplateData" json:"TemplateData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Number of retries after failed attempts (used internally)
	Retries int32 `protobuf:"varint,15,opt,name=Retries" json:"Retries,omitempty"`
	// Errors stacked on failed attempts
	SendErrors []string `protobuf:"bytes,16,rep,name=sendErrors" json:"sendErrors,omitempty"`
	// User object used to compute the Sender header
	Sender *User `protobuf:"bytes,17,opt,name=Sender" json:"Sender,omitempty"`
}

func (m *Mail) Reset()                    { *m = Mail{} }
func (m *Mail) String() string            { return proto.CompactTextString(m) }
func (*Mail) ProtoMessage()               {}
func (*Mail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Mail) GetFrom() *User {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Mail) GetTo() []*User {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Mail) GetCc() []*User {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *Mail) GetDateSent() int64 {
	if m != nil {
		return m.DateSent
	}
	return 0
}

func (m *Mail) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Mail) GetContentPlain() string {
	if m != nil {
		return m.ContentPlain
	}
	return ""
}

func (m *Mail) GetContentHtml() string {
	if m != nil {
		return m.ContentHtml
	}
	return ""
}

func (m *Mail) GetContentMarkdown() string {
	if m != nil {
		return m.ContentMarkdown
	}
	return ""
}

func (m *Mail) GetAttachments() []string {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Mail) GetThreadUuid() string {
	if m != nil {
		return m.ThreadUuid
	}
	return ""
}

func (m *Mail) GetThreadIndex() string {
	if m != nil {
		return m.ThreadIndex
	}
	return ""
}

func (m *Mail) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *Mail) GetTemplateData() map[string]string {
	if m != nil {
		return m.TemplateData
	}
	return nil
}

func (m *Mail) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *Mail) GetSendErrors() []string {
	if m != nil {
		return m.SendErrors
	}
	return nil
}

func (m *Mail) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

type SendMailRequest struct {
	// Complete mail object to send
	Mail *Mail `protobuf:"bytes,1,opt,name=Mail" json:"Mail,omitempty"`
	// Whether to place in mails queue or to send right away
	InQueue bool `protobuf:"varint,2,opt,name=InQueue" json:"InQueue,omitempty"`
}

func (m *SendMailRequest) Reset()                    { *m = SendMailRequest{} }
func (m *SendMailRequest) String() string            { return proto.CompactTextString(m) }
func (*SendMailRequest) ProtoMessage()               {}
func (*SendMailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendMailRequest) GetMail() *Mail {
	if m != nil {
		return m.Mail
	}
	return nil
}

func (m *SendMailRequest) GetInQueue() bool {
	if m != nil {
		return m.InQueue
	}
	return false
}

type SendMailResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *SendMailResponse) Reset()                    { *m = SendMailResponse{} }
func (m *SendMailResponse) String() string            { return proto.CompactTextString(m) }
func (*SendMailResponse) ProtoMessage()               {}
func (*SendMailResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SendMailResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ConsumeQueueRequest struct {
	MaxEmails int64 `protobuf:"varint,1,opt,name=MaxEmails" json:"MaxEmails,omitempty"`
}

func (m *ConsumeQueueRequest) Reset()                    { *m = ConsumeQueueRequest{} }
func (m *ConsumeQueueRequest) String() string            { return proto.CompactTextString(m) }
func (*ConsumeQueueRequest) ProtoMessage()               {}
func (*ConsumeQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConsumeQueueRequest) GetMaxEmails() int64 {
	if m != nil {
		return m.MaxEmails
	}
	return 0
}

type ConsumeQueueResponse struct {
	Message    string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
	EmailsSent int64  `protobuf:"varint,2,opt,name=EmailsSent" json:"EmailsSent,omitempty"`
}

func (m *ConsumeQueueResponse) Reset()                    { *m = ConsumeQueueResponse{} }
func (m *ConsumeQueueResponse) String() string            { return proto.CompactTextString(m) }
func (*ConsumeQueueResponse) ProtoMessage()               {}
func (*ConsumeQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConsumeQueueResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ConsumeQueueResponse) GetEmailsSent() int64 {
	if m != nil {
		return m.EmailsSent
	}
	return 0
}

func init() {
	proto.RegisterType((*User)(nil), "mailer.User")
	proto.RegisterType((*Mail)(nil), "mailer.Mail")
	proto.RegisterType((*SendMailRequest)(nil), "mailer.SendMailRequest")
	proto.RegisterType((*SendMailResponse)(nil), "mailer.SendMailResponse")
	proto.RegisterType((*ConsumeQueueRequest)(nil), "mailer.ConsumeQueueRequest")
	proto.RegisterType((*ConsumeQueueResponse)(nil), "mailer.ConsumeQueueResponse")
}

func init() { proto.RegisterFile("mailer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0xae, 0x63, 0x13, 0xc2, 0x10, 0x4a, 0xd8, 0x22, 0x75, 0x95, 0x46, 0xc8, 0xb2, 0x7a, 0xc8,
	0xa1, 0xca, 0x01, 0x2e, 0x55, 0x2f, 0x88, 0x86, 0x54, 0x8d, 0x5a, 0x57, 0xd4, 0x09, 0x0f, 0xb0,
	0xd8, 0x23, 0x70, 0xb1, 0xd7, 0xe9, 0xee, 0x9a, 0xc2, 0xc3, 0xf4, 0x29, 0xfb, 0x02, 0xd5, 0xee,
	0xda, 0x89, 0xf3, 0x73, 0xdb, 0xef, 0x9b, 0x99, 0x6f, 0x67, 0xc6, 0xdf, 0x1a, 0xba, 0x39, 0x4b,
	0x33, 0x14, 0xa3, 0x85, 0x28, 0x54, 0x41, 0xda, 0x16, 0x05, 0x09, 0x78, 0xb7, 0x12, 0x05, 0x21,
	0xe0, 0xdd, 0x96, 0x69, 0x42, 0x1d, 0xdf, 0x19, 0x1e, 0x44, 0xe6, 0x4c, 0x28, 0xec, 0x5f, 0x25,
	0x89, 0x40, 0x29, 0x69, 0xcb, 0xd0, 0x35, 0xd4, 0xd9, 0x3f, 0x58, 0x8e, 0xd4, 0xb5, 0xd9, 0xfa,
	0x4c, 0xfa, 0xd0, 0xf9, 0xce, 0xf8, 0x7d, 0xc9, 0xee, 0x91, 0x7a, 0x86, 0x5f, 0xe2, 0xe0, 0x9f,
	0x07, 0x5e, 0xc8, 0xd2, 0x8c, 0xf8, 0xe0, 0x7d, 0x11, 0x45, 0x6e, 0xae, 0x39, 0x3c, 0xef, 0x8e,
	0xaa, 0x9e, 0x74, 0x0b, 0x91, 0x89, 0x90, 0x01, 0xb4, 0xe6, 0x05, 0x75, 0x7d, 0x77, 0x2b, 0xde,
	0x9a, 0x17, 0x3a, 0x3a, 0x8e, 0xa9, 0xb7, 0x2b, 0x3a, 0x8e, 0x75, 0x0b, 0xd7, 0x4c, 0xe1, 0x0c,
	0xb9, 0xa2, 0x7b, 0xbe, 0x33, 0x74, 0xa3, 0x25, 0xd6, 0xc3, 0xcc, 0xca, 0xbb, 0x5f, 0x18, 0x2b,
	0xda, 0xb6, 0xc3, 0x54, 0x90, 0x04, 0xd0, 0x1d, 0x17, 0x5c, 0x21, 0x57, 0x37, 0x19, 0x4b, 0x39,
	0xdd, 0x37, 0xe1, 0x35, 0x8e, 0xf8, 0x70, 0x58, 0xe1, 0xaf, 0x2a, 0xcf, 0x68, 0xc7, 0xa4, 0x34,
	0x29, 0x32, 0x84, 0xe3, 0x0a, 0x86, 0x4c, 0x3c, 0x26, 0xc5, 0x1f, 0x4e, 0x0f, 0x4c, 0xd6, 0x26,
	0xad, 0xb5, 0xae, 0x94, 0x62, 0xf1, 0x43, 0x8e, 0x5c, 0x49, 0x0a, 0xbe, 0xab, 0xb5, 0x1a, 0x14,
	0x39, 0x03, 0x98, 0x3f, 0x08, 0x64, 0x89, 0xf9, 0x24, 0x87, 0x46, 0xa6, 0xc1, 0x68, 0x05, 0x8b,
	0xa6, 0x3c, 0xc1, 0x67, 0xda, 0xb5, 0xdd, 0x34, 0x28, 0xa3, 0x80, 0xf9, 0x22, 0x63, 0x0a, 0xa7,
	0x09, 0x3d, 0xaa, 0x14, 0x96, 0x0c, 0xf9, 0x0c, 0xdd, 0x1a, 0x5d, 0x33, 0xc5, 0xe8, 0x6b, 0xb3,
	0xd1, 0xb3, 0x7a, 0xa3, 0xfa, 0x5b, 0x8d, 0x9a, 0x09, 0x13, 0xae, 0xc4, 0x4b, 0xb4, 0x56, 0xa3,
	0x37, 0x1a, 0xa1, 0x12, 0x29, 0x4a, 0x7a, 0xec, 0x3b, 0xc3, 0xbd, 0xa8, 0x86, 0xfa, 0x76, 0x89,
	0x3c, 0x99, 0x08, 0x51, 0x08, 0x49, 0x7b, 0x66, 0xc0, 0x06, 0x43, 0xde, 0x43, 0x7b, 0x86, 0x3c,
	0x41, 0x41, 0x4f, 0x76, 0xf8, 0xa0, 0x8a, 0xf5, 0x2f, 0xe1, 0x64, 0xab, 0x05, 0xd2, 0x03, 0xf7,
	0x11, 0x5f, 0x2a, 0x9b, 0xea, 0x23, 0x39, 0x85, 0xbd, 0x27, 0x96, 0x95, 0x58, 0x79, 0xd4, 0x82,
	0x4f, 0xad, 0x8f, 0x4e, 0x10, 0xc2, 0xb1, 0x96, 0xd2, 0xc3, 0x44, 0xf8, 0xbb, 0x44, 0xa9, 0xb4,
	0xff, 0x34, 0xdc, 0xf4, 0x9f, 0x49, 0xb1, 0x0e, 0xa5, 0xb0, 0x3f, 0xe5, 0x3f, 0x4b, 0xac, 0x04,
	0x3b, 0x51, 0x0d, 0x83, 0x0f, 0xd0, 0x5b, 0xc9, 0xc9, 0x45, 0xc1, 0x25, 0x5a, 0x57, 0xc5, 0xb1,
	0x7e, 0x22, 0x8e, 0xcd, 0xae, 0x60, 0x70, 0x01, 0x6f, 0xc6, 0x05, 0x97, 0x65, 0x8e, 0xa6, 0xba,
	0x6e, 0x60, 0x00, 0x07, 0x21, 0x7b, 0x9e, 0xe8, 0x7b, 0x6d, 0x89, 0x1b, 0xad, 0x88, 0xe0, 0x06,
	0x4e, 0xd7, 0x8b, 0x56, 0xd7, 0x84, 0x28, 0xa5, 0x7e, 0x5a, 0x76, 0xf2, 0x1a, 0xea, 0x55, 0xdb,
	0x5a, 0x63, 0xfa, 0x96, 0x11, 0x6c, 0x30, 0xe7, 0x7f, 0x1d, 0x38, 0x0a, 0xcd, 0x90, 0x33, 0x14,
	0x4f, 0x69, 0x8c, 0xe4, 0x12, 0x3a, 0xf5, 0x18, 0xe4, 0x6d, 0xbd, 0x80, 0x8d, 0x3d, 0xf5, 0xe9,
	0x76, 0xc0, 0xb6, 0x12, 0xbc, 0x22, 0xdf, 0xcc, 0x7b, 0x59, 0x36, 0x49, 0xde, 0xd5, 0xb9, 0x3b,
	0xe6, 0xed, 0x0f, 0x76, 0x07, 0x6b, 0xb1, 0xbb, 0xb6, 0xf9, 0x1d, 0x5d, 0xfc, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0x89, 0x9a, 0x79, 0xa3, 0x9e, 0x04, 0x00, 0x00,
}

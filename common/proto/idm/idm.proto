syntax = "proto3";

import "github.com/pydio/cells/common/service/proto/common.proto";
import "github.com/pydio/cells/common/proto/tree/tree.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

package idm;

// *****************************************************************************
//  Services
// *****************************************************************************
service RoleService {
    rpc CreateRole (CreateRoleRequest) returns (CreateRoleResponse) {};
    rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse) {};
    rpc SearchRole (SearchRoleRequest) returns (stream SearchRoleResponse) {};
    rpc StreamRole (stream SearchRoleRequest) returns (stream SearchRoleResponse) {};
}

// *****************************************************************************
//  Messages structure
// *****************************************************************************
message CreateRoleRequest{
    Role Role = 1;
}

message CreateRoleResponse{
    Role Role = 1;
}

message DeleteRoleRequest{
    service.Query Query = 1;
}

message DeleteRoleResponse{
    int64 RowsDeleted = 1;
}

message SearchRoleRequest{
    service.Query Query = 1;
}

message SearchRoleResponse{
    Role Role = 1;
}

// Role represents a generic set of permissions that can be applied to any users or groups.
message Role {
    // Unique identifier of this role
    string Uuid = 1;
    // Label of this role
    string Label = 2;
    // Whether this role represents a user team or not
    bool IsTeam = 3;
    // Whether this role is attached to a Group object
    bool GroupRole = 4;
    // Whether this role is attached to a User object
    bool UserRole = 5;
    // Last modification date of the role
    int32 LastUpdated = 6;
    // List of profiles (standard, shared, admin) on which the role will be automatically applied
    repeated string AutoApplies = 7;
    // List of policies for securing this role access
    repeated service.ResourcePolicy Policies = 8;
    // Whether the policies resolve into an editable state
    bool PoliciesContextEditable = 9;
    // Is used in a stack of roles, this one will always be applied last.
    bool ForceOverride = 10;
}

// RoleSingleQuery is the basic unit for building queries to Roles.
message RoleSingleQuery {
    // Look for roles by Uuid
    repeated string Uuid = 1;
    // Look for roles by label, eventually using wildchar
    string Label = 2;
    // Look for team roles only
    bool IsTeam = 3;
    // Look for group roles only
    bool IsGroupRole = 4;
    // Look for user roles only
    bool IsUserRole = 5;
    // Look for roles that have any value in the autoApplies field
    bool HasAutoApply = 6;
    // Negate the query
    bool not = 7;
}

// *****************************************************************************
//  Services
// *****************************************************************************
service UserService {

    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {};
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {};

    rpc BindUser (BindUserRequest) returns (BindUserResponse) {};

    rpc CountUser (SearchUserRequest) returns (CountUserResponse) {};
    rpc SearchUser (SearchUserRequest) returns (stream SearchUserResponse) {};
    rpc StreamUser (stream SearchUserRequest) returns (stream SearchUserResponse) {};

}

// *****************************************************************************
//  Messages structure
// *****************************************************************************
message CreateUserRequest{
    User User = 1;
}

message CreateUserResponse{
    User User = 1;
}

message BindUserRequest{
    string userName = 1;
    string password = 2;
}

message BindUserResponse{
    User User = 1;
}

message DeleteUserRequest{
    service.Query Query = 1;
}

message DeleteUserResponse{
    int64 RowsDeleted = 1;
}

message SearchUserRequest{
    service.Query Query = 1;
}

message SearchUserResponse{
    User User = 1;
}

message CountUserResponse {
    int32 Count = 1;
}

// User can represent either a User or a Group
message User {
    // User unique identifier
    string Uuid = 1;
    // Path to the parent group
    string GroupPath = 2;
    // A free list of attributes
    map<string, string> Attributes = 3;
    // List of roles applied to this user or group
    repeated Role Roles = 4;

    // User login is used to connect, field is empty for groups
    string Login = 5;
    // Password can be passed to be updated (but never read back), field is empty for groups
    string Password = 6;
    // OldPassword must be set when a user updates her own password
    string OldPassword = 11;

    // Whether this object is a group or a user
    bool IsGroup = 7;
    // Label of the group, field is empty for users
    string GroupLabel = 8;

    // Policies securing access to this user
    repeated service.ResourcePolicy Policies = 9;
    // Context-resolved to quickly check if user is editable or not.
    bool PoliciesContextEditable = 10;

}

enum NodeType {
    UNKNOWN = 0;
    USER = 1;
    GROUP = 2;
}

message UserSingleQuery {

    string Uuid = 11;

    string Login = 1;
    string Password = 2;
    // Search on group path, and if so, search recursively
    string GroupPath = 3;
    bool Recursive = 4;
    // Search a specific group by path
    string FullPath = 12;

    // Search on attribute
    string AttributeName = 5;
    string AttributeValue = 6;
    bool AttributeAnyValue = 7;
    // Search on roles
    string HasRole = 8;
    NodeType NodeType = 9;

    bool not = 10;
}

// *****************************************************************************
//  Services Worskpace
// *****************************************************************************
service WorkspaceService {
    rpc CreateWorkspace (CreateWorkspaceRequest) returns (CreateWorkspaceResponse) {};
    rpc DeleteWorkspace (DeleteWorkspaceRequest) returns (DeleteWorkspaceResponse) {};
    rpc SearchWorkspace (SearchWorkspaceRequest) returns (stream SearchWorkspaceResponse) {};
    rpc StreamWorkspace (stream SearchWorkspaceRequest) returns (stream SearchWorkspaceResponse) {};
}

// *****************************************************************************
//  Messages structure
// *****************************************************************************
message CreateWorkspaceRequest{
    Workspace Workspace = 1;
}

message CreateWorkspaceResponse{
    Workspace Workspace = 1;
}

message DeleteWorkspaceRequest{
    service.Query Query = 1;
}

message DeleteWorkspaceResponse{
    int64 RowsDeleted = 1;
}

message SearchWorkspaceRequest{
    service.Query Query = 1;
}

message SearchWorkspaceResponse{
    Workspace Workspace = 1;
}

enum WorkspaceScope{
    ANY = 0;
    ADMIN = 1;
    ROOM = 2;
    LINK = 3;
}

// A Workspace is composed of a set of nodes UUIDs and is used to provide accesses to the tree via ACLs.
message Workspace {
    // Unique identifier of the workspace
    string UUID = 1;
    // Label of the workspace (max length 500)
    string Label = 2 [(validator.field) = {length_lt: 500}];
    // Description of the workspace (max length 1000)
    string Description = 3 [(validator.field) = {length_lt: 1000}];
    // Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)
    string Slug = 4 [(validator.field) = {length_lt: 500}];
    // Scope can be ADMIN, ROOM (=CELL) or LINK
    WorkspaceScope Scope = 5;
    // Last modification time
    int32 LastUpdated = 6;
    // Policies for securing access
    repeated service.ResourcePolicy Policies = 7;
    // JSON-encoded list of attributes
    string Attributes = 8;
    // Quick list of the RootNodes uuids
    repeated string RootUUIDs = 9;
    // List of the Root Nodes in the tree that compose this workspace
    map<string,tree.Node> RootNodes = 11;
    // Context-resolved to quickly check if workspace is editable or not
    bool PoliciesContextEditable = 12;
}

message WorkspaceSingleQuery {
    string uuid  = 1;
    string label = 2;
    string description = 3;
    string slug  = 4;
    WorkspaceScope scope = 5;
    bool not = 6;
}

// *****************************************************************************
//  ACL Services
// *****************************************************************************
service ACLService {
    rpc CreateACL (CreateACLRequest) returns (CreateACLResponse) {};
    rpc DeleteACL (DeleteACLRequest) returns (DeleteACLResponse) {};
    rpc SearchACL (SearchACLRequest) returns (stream SearchACLResponse) {};
    rpc StreamACL (stream SearchACLRequest) returns (stream SearchACLResponse) {};
}

// *****************************************************************************
//  ACL Messages structure
// *****************************************************************************
message CreateACLRequest{
    ACL ACL = 1;
}

message CreateACLResponse{
    ACL ACL = 1;
}

message DeleteACLRequest{
    service.Query Query = 1;
}

message DeleteACLResponse{
    int64 RowsDeleted = 1;
}

message SearchACLRequest{
    service.Query Query = 1;
}

message SearchACLResponse{
    ACL ACL = 1;
}

message ACLAction{
    string Name = 1;
    string Value = 2;
}

// ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role.
// The context of how they apply can be fine-tuned by workspace.
message ACL {
    // Unique ID of this ACL
    string ID = 1;
    // Action on which this ACL provides control
    ACLAction Action = 2;
    // Associated Role
    string RoleID = 3;
    // Associated Workspace
    string WorkspaceID = 4;
    // Associated Node
    string NodeID = 5;
}

message ACLSingleQuery {
    repeated ACLAction Actions = 1;
    repeated string RoleIDs = 2;
    repeated string WorkspaceIDs = 3;
    repeated string NodeIDs = 4;
    bool not = 5;
}

// UserMetaService is a dedicated Metadata Service that implements the ResourcePolicy model,
// thus providing Read/Write authorizations at a fine-grained level.
service UserMetaService {
    rpc UpdateUserMeta(UpdateUserMetaRequest) returns (UpdateUserMetaResponse) {}
    rpc SearchUserMeta(SearchUserMetaRequest) returns (stream SearchUserMetaResponse) {}
    rpc UpdateUserMetaNamespace(UpdateUserMetaNamespaceRequest) returns (UpdateUserMetaNamespaceResponse){}
    rpc ListUserMetaNamespace(ListUserMetaNamespaceRequest) returns (stream ListUserMetaNamespaceResponse){}
}

// Piece of metadata attached to a node
message UserMeta {
    // Unique identifier of the metadata
    string Uuid = 1;
    // Unique identifier of the node to which meta is attached
    string NodeUuid = 2;
    // Namespace for the metadata
    string Namespace = 3;
    // Json encoded value used to pass any type of values
    string JsonValue = 4;
    // Policies for securing access
    repeated service.ResourcePolicy Policies = 5;
    // Context-resolved to quickly check if this meta is editable or not
    bool PoliciesContextEditable = 6;
}
// Globally declared Namespace with associated policies
message UserMetaNamespace{
    // Namespace identifier, must be unique
    string Namespace = 1;
    // Human-readable Label
    string Label = 2;
    // Order is used for sorting lists of namesapces
    int32 Order = 3;
    // Whether a modification of a metadata value for this namespace should trigger an indexation by the search engine
    bool Indexable = 4;
    // Json-encoded type to provide accurate interface for edition
    string JsonDefinition = 5;
    // Policies securing this namespace
    repeated service.ResourcePolicy Policies = 6;
}
// Request for modifying UserMeta
message UpdateUserMetaRequest{
    enum UserMetaOp {
        PUT = 0;
        DELETE = 1;
    }
    // Type of operation to apply (PUT / DELETE)
    UserMetaOp Operation = 1;
    // List of metadatas to update or delete
    repeated UserMeta MetaDatas = 3;
}
// Response of UpdateUserMeta service
message UpdateUserMetaResponse{
    // List of metadatas
    repeated UserMeta MetaDatas = 3;
}
// Request for searching UserMeta by NodeUuid or by Namespace
message SearchUserMetaRequest{
    // Look for meta by their unique identifier
    repeated string MetaUuids = 1;
    // Look for all meta for a list of nodes
    repeated string NodeUuids = 2;
    // Filter meta by their namespace
    string Namespace = 3;
    // Filter meta by owner (in the sense of the policies)
    string ResourceSubjectOwner = 4;
    // Filter meta by policies query
    service.ResourcePolicyQuery ResourceQuery = 5;
}
// Streamed container for the UserMeta results
message SearchUserMetaResponse{
    UserMeta UserMeta = 1;
}
// Modify UserMetaNamespaces
message UpdateUserMetaNamespaceRequest{
    enum UserMetaNsOp {
        PUT = 0;
        DELETE = 1;
    }
    UserMetaNsOp Operation = 1;
    repeated UserMetaNamespace Namespaces = 2;
}
// Response of the
message UpdateUserMetaNamespaceResponse{
    repeated UserMetaNamespace Namespaces = 1;
}
// List All MetaNamespaces
message ListUserMetaNamespaceRequest{}
// Collection of results
message ListUserMetaNamespaceResponse{
    UserMetaNamespace UserMetaNamespace = 1;
}

// Message Types for ChangeEvent
enum ChangeEventType {
    CREATE = 0;
    READ   = 1;
    UPDATE = 2;
    DELETE = 3;
    BIND   = 4;
    LOGOUT = 5;
}

// Global Event message for IDM
message ChangeEvent {
    string jsonType = 1 [json_name="@type"];
    ChangeEventType Type = 2;
    User User = 3;
    Role Role = 4;
    Workspace Workspace = 5;
    ACL Acl = 6;
    UserMetaNamespace MetaNamespace = 8;
    map<string,string> Attributes = 7;
}

// ************************************
// Policy Engine Services
// ************************************
service PolicyEngineService {
    rpc IsAllowed (PolicyEngineRequest) returns (PolicyEngineResponse) {};
    rpc StorePolicyGroup(StorePolicyGroupRequest) returns (StorePolicyGroupResponse) {};
    rpc ListPolicyGroups(ListPolicyGroupsRequest) returns (ListPolicyGroupsResponse) {};
    rpc DeletePolicyGroup(DeletePolicyGroupRequest) returns (DeletePolicyGroupResponse) {};
}

// ************************************
// Messages Structures
// ************************************
message PolicyEngineRequest {
    string Resource  = 1;
    string Action = 2;
    repeated string Subjects = 3;
    map<string,string> Context = 4;
}

message PolicyEngineResponse {
    bool Allowed = 1;
    bool ExplicitDeny = 2;
    bool DefaultDeny = 3;
}

enum PolicyEffect {
    unknown = 0;
    deny = 1;
    allow = 2;
}

enum PolicyResourceGroup{
    rest = 0;
    acl  = 1;
    oidc = 2;
}

message PolicyCondition {
    string type = 1 [json_name="type"];
    string jsonOptions = 2 [json_name="jsonOptions"];
}

message Policy {
    string id = 1 [json_name="id"];
    string description = 2 [json_name="description"];
    repeated string subjects = 3 [json_name="subjects"];
    repeated string resources = 4 [json_name="resources"];
    repeated string actions = 5 [json_name="actions"];
    PolicyEffect effect = 6 [json_name="effect"];
    map <string,PolicyCondition> conditions = 7 [json_name="conditions"];
}

message PolicyGroup {
    string Uuid = 1;
    string Name = 2;
    string Description = 3;
    string OwnerUuid = 4;
    PolicyResourceGroup ResourceGroup = 5;
    int32 LastUpdated = 6;
    repeated Policy Policies = 7;
}

// Request / Response Messages
message StorePolicyGroupRequest{
    PolicyGroup PolicyGroup = 1;
}
message StorePolicyGroupResponse{
    PolicyGroup PolicyGroup = 1;
}
message DeletePolicyGroupRequest{
    PolicyGroup PolicyGroup = 1;
}
message DeletePolicyGroupResponse{
    bool Success = 1;
}
message ListPolicyGroupsRequest{
}
message ListPolicyGroupsResponse{
    repeated PolicyGroup PolicyGroups = 1;
    int32 Total = 2;
}

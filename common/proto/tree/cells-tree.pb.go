// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: cells-tree.proto

package tree

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/pydio/cells/v5/common/proto/options/orm"
	_ "github.com/pydio/cells/v5/common/proto/options/setter"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VersioningNodeDeletedStrategy int32

const (
	VersioningNodeDeletedStrategy_KeepAll  VersioningNodeDeletedStrategy = 0
	VersioningNodeDeletedStrategy_KeepLast VersioningNodeDeletedStrategy = 1
	VersioningNodeDeletedStrategy_KeepNone VersioningNodeDeletedStrategy = 2
)

// Enum value maps for VersioningNodeDeletedStrategy.
var (
	VersioningNodeDeletedStrategy_name = map[int32]string{
		0: "KeepAll",
		1: "KeepLast",
		2: "KeepNone",
	}
	VersioningNodeDeletedStrategy_value = map[string]int32{
		"KeepAll":  0,
		"KeepLast": 1,
		"KeepNone": 2,
	}
)

func (x VersioningNodeDeletedStrategy) Enum() *VersioningNodeDeletedStrategy {
	p := new(VersioningNodeDeletedStrategy)
	*p = x
	return p
}

func (x VersioningNodeDeletedStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersioningNodeDeletedStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_tree_proto_enumTypes[0].Descriptor()
}

func (VersioningNodeDeletedStrategy) Type() protoreflect.EnumType {
	return &file_cells_tree_proto_enumTypes[0]
}

func (x VersioningNodeDeletedStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersioningNodeDeletedStrategy.Descriptor instead.
func (VersioningNodeDeletedStrategy) EnumDescriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{0}
}

// ==========================================================
// * Standard Messages
// ==========================================================
type NodeType int32

const (
	NodeType_UNKNOWN    NodeType = 0
	NodeType_LEAF       NodeType = 1
	NodeType_COLLECTION NodeType = 2
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "UNKNOWN",
		1: "LEAF",
		2: "COLLECTION",
	}
	NodeType_value = map[string]int32{
		"UNKNOWN":    0,
		"LEAF":       1,
		"COLLECTION": 2,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_tree_proto_enumTypes[1].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_cells_tree_proto_enumTypes[1]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{1}
}

type NodeChangeEvent_EventType int32

const (
	NodeChangeEvent_CREATE           NodeChangeEvent_EventType = 0
	NodeChangeEvent_READ             NodeChangeEvent_EventType = 1
	NodeChangeEvent_UPDATE_PATH      NodeChangeEvent_EventType = 2
	NodeChangeEvent_UPDATE_CONTENT   NodeChangeEvent_EventType = 3
	NodeChangeEvent_UPDATE_META      NodeChangeEvent_EventType = 4
	NodeChangeEvent_UPDATE_USER_META NodeChangeEvent_EventType = 6
	NodeChangeEvent_DELETE           NodeChangeEvent_EventType = 5
)

// Enum value maps for NodeChangeEvent_EventType.
var (
	NodeChangeEvent_EventType_name = map[int32]string{
		0: "CREATE",
		1: "READ",
		2: "UPDATE_PATH",
		3: "UPDATE_CONTENT",
		4: "UPDATE_META",
		6: "UPDATE_USER_META",
		5: "DELETE",
	}
	NodeChangeEvent_EventType_value = map[string]int32{
		"CREATE":           0,
		"READ":             1,
		"UPDATE_PATH":      2,
		"UPDATE_CONTENT":   3,
		"UPDATE_META":      4,
		"UPDATE_USER_META": 6,
		"DELETE":           5,
	}
)

func (x NodeChangeEvent_EventType) Enum() *NodeChangeEvent_EventType {
	p := new(NodeChangeEvent_EventType)
	*p = x
	return p
}

func (x NodeChangeEvent_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeChangeEvent_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_tree_proto_enumTypes[2].Descriptor()
}

func (NodeChangeEvent_EventType) Type() protoreflect.EnumType {
	return &file_cells_tree_proto_enumTypes[2]
}

func (x NodeChangeEvent_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeChangeEvent_EventType.Descriptor instead.
func (NodeChangeEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{49, 0}
}

type SyncChange_Type int32

const (
	SyncChange_unknown SyncChange_Type = 0
	SyncChange_create  SyncChange_Type = 1
	SyncChange_delete  SyncChange_Type = 2
	SyncChange_path    SyncChange_Type = 3
	SyncChange_content SyncChange_Type = 4
)

// Enum value maps for SyncChange_Type.
var (
	SyncChange_Type_name = map[int32]string{
		0: "unknown",
		1: "create",
		2: "delete",
		3: "path",
		4: "content",
	}
	SyncChange_Type_value = map[string]int32{
		"unknown": 0,
		"create":  1,
		"delete":  2,
		"path":    3,
		"content": 4,
	}
)

func (x SyncChange_Type) Enum() *SyncChange_Type {
	p := new(SyncChange_Type)
	*p = x
	return p
}

func (x SyncChange_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncChange_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_tree_proto_enumTypes[3].Descriptor()
}

func (SyncChange_Type) Type() protoreflect.EnumType {
	return &file_cells_tree_proto_enumTypes[3]
}

func (x SyncChange_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncChange_Type.Descriptor instead.
func (SyncChange_Type) EnumDescriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{53, 0}
}

// Request / Responses Messages
type ReadNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Input node
	Node *Node `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	// Used internally for the router ReadNode request, stat the datasource instead of index
	ObjectStats bool `protobuf:"varint,4,opt,name=ObjectStats,proto3" json:"ObjectStats,omitempty"`
	// Generic Details Flags
	StatFlags []uint32 `protobuf:"varint,5,rep,packed,name=StatFlags,proto3" json:"StatFlags,omitempty"`
	// Get extended stats - For folders, computes ChildrenCount - Depreacted, use StatFlags instead
	WithExtendedStats bool `protobuf:"varint,3,opt,name=WithExtendedStats,proto3" json:"WithExtendedStats,omitempty"`
	// Gather commit information - This is Deprecated
	WithCommits   bool `protobuf:"varint,2,opt,name=WithCommits,proto3" json:"WithCommits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadNodeRequest) Reset() {
	*x = ReadNodeRequest{}
	mi := &file_cells_tree_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadNodeRequest) ProtoMessage() {}

func (x *ReadNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadNodeRequest.ProtoReflect.Descriptor instead.
func (*ReadNodeRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{0}
}

func (x *ReadNodeRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ReadNodeRequest) GetObjectStats() bool {
	if x != nil {
		return x.ObjectStats
	}
	return false
}

func (x *ReadNodeRequest) GetStatFlags() []uint32 {
	if x != nil {
		return x.StatFlags
	}
	return nil
}

func (x *ReadNodeRequest) GetWithExtendedStats() bool {
	if x != nil {
		return x.WithExtendedStats
	}
	return false
}

func (x *ReadNodeRequest) GetWithCommits() bool {
	if x != nil {
		return x.WithCommits
	}
	return false
}

type ReadNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Node          *Node                  `protobuf:"bytes,2,opt,name=Node,proto3" json:"Node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadNodeResponse) Reset() {
	*x = ReadNodeResponse{}
	mi := &file_cells_tree_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadNodeResponse) ProtoMessage() {}

func (x *ReadNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadNodeResponse.ProtoReflect.Descriptor instead.
func (*ReadNodeResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{1}
}

func (x *ReadNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReadNodeResponse) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type ListNodesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Main node used as a parent
	Node *Node `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	// Send back all children of the node
	Recursive bool `protobuf:"varint,2,opt,name=Recursive,proto3" json:"Recursive,omitempty"`
	// Send back a list of parent nodes, until the root, including the original node
	Ancestors bool `protobuf:"varint,3,opt,name=Ancestors,proto3" json:"Ancestors,omitempty"`
	// Sends the list of versions for a given node
	WithVersions bool `protobuf:"varint,7,opt,name=WithVersions,proto3" json:"WithVersions,omitempty"`
	// Limit the number of results
	Limit int64 `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// Start listing at a given position
	Offset int64 `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// Filter by node type (LEAF / COLLECTION)
	FilterType NodeType `protobuf:"varint,6,opt,name=FilterType,proto3,enum=tree.NodeType" json:"FilterType,omitempty"`
	// Generic Details Flags
	StatFlags []uint32 `protobuf:"varint,9,rep,packed,name=StatFlags,proto3" json:"StatFlags,omitempty"`
	// Remote Sort on specific field
	SortField string `protobuf:"bytes,10,opt,name=SortField,proto3" json:"SortField,omitempty"`
	// Sort descending (otherwise ascending)
	SortDirDesc bool `protobuf:"varint,11,opt,name=SortDirDesc,proto3" json:"SortDirDesc,omitempty"`
	// Sends the list of commits for a given node (Deprecated)
	WithCommits   bool `protobuf:"varint,8,opt,name=WithCommits,proto3" json:"WithCommits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	mi := &file_cells_tree_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{2}
}

func (x *ListNodesRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListNodesRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *ListNodesRequest) GetAncestors() bool {
	if x != nil {
		return x.Ancestors
	}
	return false
}

func (x *ListNodesRequest) GetWithVersions() bool {
	if x != nil {
		return x.WithVersions
	}
	return false
}

func (x *ListNodesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNodesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNodesRequest) GetFilterType() NodeType {
	if x != nil {
		return x.FilterType
	}
	return NodeType_UNKNOWN
}

func (x *ListNodesRequest) GetStatFlags() []uint32 {
	if x != nil {
		return x.StatFlags
	}
	return nil
}

func (x *ListNodesRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *ListNodesRequest) GetSortDirDesc() bool {
	if x != nil {
		return x.SortDirDesc
	}
	return false
}

func (x *ListNodesRequest) GetWithCommits() bool {
	if x != nil {
		return x.WithCommits
	}
	return false
}

type ListNodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *Node                  `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	mi := &file_cells_tree_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{3}
}

func (x *ListNodesResponse) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type WrappingStreamerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*WrappingStreamerResponse_ListNodesResponse
	//	*WrappingStreamerResponse_NodeChangeEvent
	Data          isWrappingStreamerResponse_Data `protobuf_oneof:"Data"`
	Error         string                          `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WrappingStreamerResponse) Reset() {
	*x = WrappingStreamerResponse{}
	mi := &file_cells_tree_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WrappingStreamerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrappingStreamerResponse) ProtoMessage() {}

func (x *WrappingStreamerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrappingStreamerResponse.ProtoReflect.Descriptor instead.
func (*WrappingStreamerResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{4}
}

func (x *WrappingStreamerResponse) GetData() isWrappingStreamerResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WrappingStreamerResponse) GetListNodesResponse() *ListNodesResponse {
	if x != nil {
		if x, ok := x.Data.(*WrappingStreamerResponse_ListNodesResponse); ok {
			return x.ListNodesResponse
		}
	}
	return nil
}

func (x *WrappingStreamerResponse) GetNodeChangeEvent() *NodeChangeEvent {
	if x != nil {
		if x, ok := x.Data.(*WrappingStreamerResponse_NodeChangeEvent); ok {
			return x.NodeChangeEvent
		}
	}
	return nil
}

func (x *WrappingStreamerResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type isWrappingStreamerResponse_Data interface {
	isWrappingStreamerResponse_Data()
}

type WrappingStreamerResponse_ListNodesResponse struct {
	ListNodesResponse *ListNodesResponse `protobuf:"bytes,1,opt,name=ListNodesResponse,proto3,oneof"`
}

type WrappingStreamerResponse_NodeChangeEvent struct {
	NodeChangeEvent *NodeChangeEvent `protobuf:"bytes,2,opt,name=NodeChangeEvent,proto3,oneof"`
}

func (*WrappingStreamerResponse_ListNodesResponse) isWrappingStreamerResponse_Data() {}

func (*WrappingStreamerResponse_NodeChangeEvent) isWrappingStreamerResponse_Data() {}

// Request / Responses Messages
type CreateNodeRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Node              *Node                  `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	UpdateIfExists    bool                   `protobuf:"varint,2,opt,name=UpdateIfExists,proto3" json:"UpdateIfExists,omitempty"`
	IndexationSession string                 `protobuf:"bytes,3,opt,name=IndexationSession,proto3" json:"IndexationSession,omitempty"`
	Silent            bool                   `protobuf:"varint,4,opt,name=Silent,proto3" json:"Silent,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateNodeRequest) Reset() {
	*x = CreateNodeRequest{}
	mi := &file_cells_tree_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeRequest) ProtoMessage() {}

func (x *CreateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNodeRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateNodeRequest) GetUpdateIfExists() bool {
	if x != nil {
		return x.UpdateIfExists
	}
	return false
}

func (x *CreateNodeRequest) GetIndexationSession() string {
	if x != nil {
		return x.IndexationSession
	}
	return ""
}

func (x *CreateNodeRequest) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

type CreateNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Node          *Node                  `protobuf:"bytes,2,opt,name=Node,proto3" json:"Node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNodeResponse) Reset() {
	*x = CreateNodeResponse{}
	mi := &file_cells_tree_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeResponse) ProtoMessage() {}

func (x *CreateNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{6}
}

func (x *CreateNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateNodeResponse) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type UpdateNodeRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	From              *Node                  `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To                *Node                  `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	IndexationSession string                 `protobuf:"bytes,3,opt,name=IndexationSession,proto3" json:"IndexationSession,omitempty"`
	Silent            bool                   `protobuf:"varint,4,opt,name=Silent,proto3" json:"Silent,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateNodeRequest) Reset() {
	*x = UpdateNodeRequest{}
	mi := &file_cells_tree_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeRequest) ProtoMessage() {}

func (x *UpdateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNodeRequest) GetFrom() *Node {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *UpdateNodeRequest) GetTo() *Node {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *UpdateNodeRequest) GetIndexationSession() string {
	if x != nil {
		return x.IndexationSession
	}
	return ""
}

func (x *UpdateNodeRequest) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

type UpdateNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Node          *Node                  `protobuf:"bytes,2,opt,name=Node,proto3" json:"Node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNodeResponse) Reset() {
	*x = UpdateNodeResponse{}
	mi := &file_cells_tree_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeResponse) ProtoMessage() {}

func (x *UpdateNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateNodeResponse) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type DeleteNodeRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Node              *Node                  `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	IndexationSession string                 `protobuf:"bytes,2,opt,name=IndexationSession,proto3" json:"IndexationSession,omitempty"`
	Silent            bool                   `protobuf:"varint,3,opt,name=Silent,proto3" json:"Silent,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	mi := &file_cells_tree_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteNodeRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *DeleteNodeRequest) GetIndexationSession() string {
	if x != nil {
		return x.IndexationSession
	}
	return ""
}

func (x *DeleteNodeRequest) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

type DeleteNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNodeResponse) Reset() {
	*x = DeleteNodeResponse{}
	mi := &file_cells_tree_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeResponse) ProtoMessage() {}

func (x *DeleteNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type IndexationSession struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Uuid                    string                 `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Description             string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	RootNode                *Node                  `protobuf:"bytes,3,opt,name=RootNode,proto3" json:"RootNode,omitempty"`
	ExpectedOperationsCount int64                  `protobuf:"varint,4,opt,name=ExpectedOperationsCount,proto3" json:"ExpectedOperationsCount,omitempty"`
	CurrentOperationCount   int64                  `protobuf:"varint,5,opt,name=CurrentOperationCount,proto3" json:"CurrentOperationCount,omitempty"`
	Silent                  bool                   `protobuf:"varint,6,opt,name=Silent,proto3" json:"Silent,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *IndexationSession) Reset() {
	*x = IndexationSession{}
	mi := &file_cells_tree_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexationSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexationSession) ProtoMessage() {}

func (x *IndexationSession) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexationSession.ProtoReflect.Descriptor instead.
func (*IndexationSession) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{11}
}

func (x *IndexationSession) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *IndexationSession) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IndexationSession) GetRootNode() *Node {
	if x != nil {
		return x.RootNode
	}
	return nil
}

func (x *IndexationSession) GetExpectedOperationsCount() int64 {
	if x != nil {
		return x.ExpectedOperationsCount
	}
	return 0
}

func (x *IndexationSession) GetCurrentOperationCount() int64 {
	if x != nil {
		return x.CurrentOperationCount
	}
	return 0
}

func (x *IndexationSession) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

type IndexationOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionUuid   string                 `protobuf:"bytes,1,opt,name=SessionUuid,proto3" json:"SessionUuid,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Cursor        int64                  `protobuf:"varint,3,opt,name=Cursor,proto3" json:"Cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexationOperation) Reset() {
	*x = IndexationOperation{}
	mi := &file_cells_tree_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexationOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexationOperation) ProtoMessage() {}

func (x *IndexationOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexationOperation.ProtoReflect.Descriptor instead.
func (*IndexationOperation) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{12}
}

func (x *IndexationOperation) GetSessionUuid() string {
	if x != nil {
		return x.SessionUuid
	}
	return ""
}

func (x *IndexationOperation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IndexationOperation) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type OpenSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *IndexationSession     `protobuf:"bytes,1,opt,name=Session,proto3" json:"Session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenSessionRequest) Reset() {
	*x = OpenSessionRequest{}
	mi := &file_cells_tree_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSessionRequest) ProtoMessage() {}

func (x *OpenSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSessionRequest.ProtoReflect.Descriptor instead.
func (*OpenSessionRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{13}
}

func (x *OpenSessionRequest) GetSession() *IndexationSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type OpenSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *IndexationSession     `protobuf:"bytes,1,opt,name=Session,proto3" json:"Session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenSessionResponse) Reset() {
	*x = OpenSessionResponse{}
	mi := &file_cells_tree_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSessionResponse) ProtoMessage() {}

func (x *OpenSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSessionResponse.ProtoReflect.Descriptor instead.
func (*OpenSessionResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{14}
}

func (x *OpenSessionResponse) GetSession() *IndexationSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type FlushSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *IndexationSession     `protobuf:"bytes,1,opt,name=Session,proto3" json:"Session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushSessionRequest) Reset() {
	*x = FlushSessionRequest{}
	mi := &file_cells_tree_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushSessionRequest) ProtoMessage() {}

func (x *FlushSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushSessionRequest.ProtoReflect.Descriptor instead.
func (*FlushSessionRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{15}
}

func (x *FlushSessionRequest) GetSession() *IndexationSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type FlushSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *IndexationSession     `protobuf:"bytes,1,opt,name=Session,proto3" json:"Session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushSessionResponse) Reset() {
	*x = FlushSessionResponse{}
	mi := &file_cells_tree_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushSessionResponse) ProtoMessage() {}

func (x *FlushSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushSessionResponse.ProtoReflect.Descriptor instead.
func (*FlushSessionResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{16}
}

func (x *FlushSessionResponse) GetSession() *IndexationSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type CloseSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *IndexationSession     `protobuf:"bytes,1,opt,name=Session,proto3" json:"Session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseSessionRequest) Reset() {
	*x = CloseSessionRequest{}
	mi := &file_cells_tree_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionRequest) ProtoMessage() {}

func (x *CloseSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionRequest.ProtoReflect.Descriptor instead.
func (*CloseSessionRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{17}
}

func (x *CloseSessionRequest) GetSession() *IndexationSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type CloseSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *IndexationSession     `protobuf:"bytes,1,opt,name=Session,proto3" json:"Session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseSessionResponse) Reset() {
	*x = CloseSessionResponse{}
	mi := &file_cells_tree_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionResponse) ProtoMessage() {}

func (x *CloseSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionResponse.ProtoReflect.Descriptor instead.
func (*CloseSessionResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{18}
}

func (x *CloseSessionResponse) GetSession() *IndexationSession {
	if x != nil {
		return x.Session
	}
	return nil
}

// Request / Responses Messages
type WatchNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *Node                  `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchNodeRequest) Reset() {
	*x = WatchNodeRequest{}
	mi := &file_cells_tree_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchNodeRequest) ProtoMessage() {}

func (x *WatchNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchNodeRequest.ProtoReflect.Descriptor instead.
func (*WatchNodeRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{19}
}

func (x *WatchNodeRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type WatchNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *Node                  `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchNodeResponse) Reset() {
	*x = WatchNodeResponse{}
	mi := &file_cells_tree_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchNodeResponse) ProtoMessage() {}

func (x *WatchNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchNodeResponse.ProtoReflect.Descriptor instead.
func (*WatchNodeResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{20}
}

func (x *WatchNodeResponse) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type SearchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The query object
	Query *Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	// Limit the number of results
	Size int32 `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	// Start at given position
	From int32 `protobuf:"varint,3,opt,name=From,proto3" json:"From,omitempty"`
	// Load node details
	Details bool `protobuf:"varint,4,opt,name=Details,proto3" json:"Details,omitempty"`
	// Generic Details Flags
	StatFlags []uint32 `protobuf:"varint,5,rep,packed,name=StatFlags,proto3" json:"StatFlags,omitempty"`
	// Sort result using a specific field
	SortField string `protobuf:"bytes,6,opt,name=SortField,proto3" json:"SortField,omitempty"`
	// Sort direction (asc by default)
	SortDirDesc   bool `protobuf:"varint,7,opt,name=SortDirDesc,proto3" json:"SortDirDesc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_cells_tree_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{21}
}

func (x *SearchRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchRequest) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SearchRequest) GetDetails() bool {
	if x != nil {
		return x.Details
	}
	return false
}

func (x *SearchRequest) GetStatFlags() []uint32 {
	if x != nil {
		return x.StatFlags
	}
	return nil
}

func (x *SearchRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *SearchRequest) GetSortDirDesc() bool {
	if x != nil {
		return x.SortDirDesc
	}
	return false
}

type SearchFacet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Facet field name
	FieldName string `protobuf:"bytes,1,opt,name=FieldName,proto3" json:"FieldName,omitempty"`
	// Segment Label
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	// Segment results count
	Count int32 `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
	// For string facets, term value
	Term string `protobuf:"bytes,4,opt,name=Term,proto3" json:"Term,omitempty"`
	// For NumericRange facets, min/max values
	Min int64 `protobuf:"varint,5,opt,name=Min,proto3" json:"Min,omitempty"`
	Max int64 `protobuf:"varint,6,opt,name=Max,proto3" json:"Max,omitempty"`
	// For DateRange facets, start/end values
	Start         int32 `protobuf:"varint,7,opt,name=Start,proto3" json:"Start,omitempty"`
	End           int32 `protobuf:"varint,8,opt,name=End,proto3" json:"End,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchFacet) Reset() {
	*x = SearchFacet{}
	mi := &file_cells_tree_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchFacet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFacet) ProtoMessage() {}

func (x *SearchFacet) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFacet.ProtoReflect.Descriptor instead.
func (*SearchFacet) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{22}
}

func (x *SearchFacet) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *SearchFacet) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SearchFacet) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchFacet) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *SearchFacet) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SearchFacet) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *SearchFacet) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SearchFacet) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type SearchPagination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total number of results
	TotalHits     int64 `protobuf:"varint,1,opt,name=TotalHits,proto3" json:"TotalHits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchPagination) Reset() {
	*x = SearchPagination{}
	mi := &file_cells_tree_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPagination) ProtoMessage() {}

func (x *SearchPagination) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPagination.ProtoReflect.Descriptor instead.
func (*SearchPagination) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{23}
}

func (x *SearchPagination) GetTotalHits() int64 {
	if x != nil {
		return x.TotalHits
	}
	return 0
}

type SearchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*SearchResponse_Node
	//	*SearchResponse_Facet
	//	*SearchResponse_Pagination
	Data          isSearchResponse_Data `protobuf_oneof:"Data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_cells_tree_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{24}
}

func (x *SearchResponse) GetData() isSearchResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchResponse) GetNode() *Node {
	if x != nil {
		if x, ok := x.Data.(*SearchResponse_Node); ok {
			return x.Node
		}
	}
	return nil
}

func (x *SearchResponse) GetFacet() *SearchFacet {
	if x != nil {
		if x, ok := x.Data.(*SearchResponse_Facet); ok {
			return x.Facet
		}
	}
	return nil
}

func (x *SearchResponse) GetPagination() *SearchPagination {
	if x != nil {
		if x, ok := x.Data.(*SearchResponse_Pagination); ok {
			return x.Pagination
		}
	}
	return nil
}

type isSearchResponse_Data interface {
	isSearchResponse_Data()
}

type SearchResponse_Node struct {
	Node *Node `protobuf:"bytes,1,opt,name=Node,proto3,oneof"`
}

type SearchResponse_Facet struct {
	Facet *SearchFacet `protobuf:"bytes,2,opt,name=Facet,proto3,oneof"`
}

type SearchResponse_Pagination struct {
	Pagination *SearchPagination `protobuf:"bytes,3,opt,name=Pagination,proto3,oneof"`
}

func (*SearchResponse_Node) isSearchResponse_Data() {}

func (*SearchResponse_Facet) isSearchResponse_Data() {}

func (*SearchResponse_Pagination) isSearchResponse_Data() {}

type ListVersioningPoliciesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Limit list to one specific policy
	PolicyID string `protobuf:"bytes,1,opt,name=PolicyID,proto3" json:"PolicyID,omitempty"`
	// Limit the number of results
	Limit int64 `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// Start listing at a given position
	Offset        int64 `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersioningPoliciesRequest) Reset() {
	*x = ListVersioningPoliciesRequest{}
	mi := &file_cells_tree_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersioningPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersioningPoliciesRequest) ProtoMessage() {}

func (x *ListVersioningPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersioningPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListVersioningPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{25}
}

func (x *ListVersioningPoliciesRequest) GetPolicyID() string {
	if x != nil {
		return x.PolicyID
	}
	return ""
}

func (x *ListVersioningPoliciesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListVersioningPoliciesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type CreateVersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *Node                  `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	VersionUuid   string                 `protobuf:"bytes,2,opt,name=VersionUuid,proto3" json:"VersionUuid,omitempty"`
	OwnerName     string                 `protobuf:"bytes,3,opt,name=OwnerName,proto3" json:"OwnerName,omitempty"`
	OwnerUuid     string                 `protobuf:"bytes,4,opt,name=OwnerUuid,proto3" json:"OwnerUuid,omitempty"`
	Draft         bool                   `protobuf:"varint,5,opt,name=Draft,proto3" json:"Draft,omitempty"`
	TriggerEvent  *NodeChangeEvent       `protobuf:"bytes,6,opt,name=TriggerEvent,proto3" json:"TriggerEvent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVersionRequest) Reset() {
	*x = CreateVersionRequest{}
	mi := &file_cells_tree_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVersionRequest) ProtoMessage() {}

func (x *CreateVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVersionRequest.ProtoReflect.Descriptor instead.
func (*CreateVersionRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{26}
}

func (x *CreateVersionRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateVersionRequest) GetVersionUuid() string {
	if x != nil {
		return x.VersionUuid
	}
	return ""
}

func (x *CreateVersionRequest) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *CreateVersionRequest) GetOwnerUuid() string {
	if x != nil {
		return x.OwnerUuid
	}
	return ""
}

func (x *CreateVersionRequest) GetDraft() bool {
	if x != nil {
		return x.Draft
	}
	return false
}

func (x *CreateVersionRequest) GetTriggerEvent() *NodeChangeEvent {
	if x != nil {
		return x.TriggerEvent
	}
	return nil
}

type CreateVersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *ContentRevision       `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Ignored       bool                   `protobuf:"varint,2,opt,name=Ignored,proto3" json:"Ignored,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVersionResponse) Reset() {
	*x = CreateVersionResponse{}
	mi := &file_cells_tree_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVersionResponse) ProtoMessage() {}

func (x *CreateVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVersionResponse.ProtoReflect.Descriptor instead.
func (*CreateVersionResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{27}
}

func (x *CreateVersionResponse) GetVersion() *ContentRevision {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CreateVersionResponse) GetIgnored() bool {
	if x != nil {
		return x.Ignored
	}
	return false
}

type ListVersionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Node  *Node                  `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	// Limit the number of results
	Limit int64 `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// Start listing at a given position
	Offset int64 `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// Sort by specific fields
	SortField string `protobuf:"bytes,4,opt,name=SortField,proto3" json:"SortField,omitempty"`
	// Sort descending
	SortDesc bool `protobuf:"varint,5,opt,name=SortDesc,proto3" json:"SortDesc,omitempty"`
	// Filters by key => jsonEncoded value
	Filters       map[string]string `protobuf:"bytes,6,rep,name=Filters,proto3" json:"Filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersionsRequest) Reset() {
	*x = ListVersionsRequest{}
	mi := &file_cells_tree_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsRequest) ProtoMessage() {}

func (x *ListVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListVersionsRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{28}
}

func (x *ListVersionsRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListVersionsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListVersionsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListVersionsRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *ListVersionsRequest) GetSortDesc() bool {
	if x != nil {
		return x.SortDesc
	}
	return false
}

func (x *ListVersionsRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListVersionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *ContentRevision       `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersionsResponse) Reset() {
	*x = ListVersionsResponse{}
	mi := &file_cells_tree_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsResponse) ProtoMessage() {}

func (x *ListVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListVersionsResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{29}
}

func (x *ListVersionsResponse) GetVersion() *ContentRevision {
	if x != nil {
		return x.Version
	}
	return nil
}

type HeadVersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeUuid      string                 `protobuf:"bytes,1,opt,name=NodeUuid,proto3" json:"NodeUuid,omitempty"`
	VersionId     string                 `protobuf:"bytes,2,opt,name=VersionId,proto3" json:"VersionId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeadVersionRequest) Reset() {
	*x = HeadVersionRequest{}
	mi := &file_cells_tree_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeadVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadVersionRequest) ProtoMessage() {}

func (x *HeadVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadVersionRequest.ProtoReflect.Descriptor instead.
func (*HeadVersionRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{30}
}

func (x *HeadVersionRequest) GetNodeUuid() string {
	if x != nil {
		return x.NodeUuid
	}
	return ""
}

func (x *HeadVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type HeadVersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *ContentRevision       `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeadVersionResponse) Reset() {
	*x = HeadVersionResponse{}
	mi := &file_cells_tree_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeadVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadVersionResponse) ProtoMessage() {}

func (x *HeadVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadVersionResponse.ProtoReflect.Descriptor instead.
func (*HeadVersionResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{31}
}

func (x *HeadVersionResponse) GetVersion() *ContentRevision {
	if x != nil {
		return x.Version
	}
	return nil
}

type DeleteVersionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DeletedVersion *ContentRevision       `protobuf:"bytes,1,opt,name=DeletedVersion,proto3" json:"DeletedVersion,omitempty"`
	Success        bool                   `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	NewHead        string                 `protobuf:"bytes,3,opt,name=NewHead,proto3" json:"NewHead,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteVersionResponse) Reset() {
	*x = DeleteVersionResponse{}
	mi := &file_cells_tree_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVersionResponse) ProtoMessage() {}

func (x *DeleteVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVersionResponse.ProtoReflect.Descriptor instead.
func (*DeleteVersionResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteVersionResponse) GetDeletedVersion() *ContentRevision {
	if x != nil {
		return x.DeletedVersion
	}
	return nil
}

func (x *DeleteVersionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteVersionResponse) GetNewHead() string {
	if x != nil {
		return x.NewHead
	}
	return ""
}

type StoreVersionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *Node                  `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	Version       *ContentRevision       `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreVersionRequest) Reset() {
	*x = StoreVersionRequest{}
	mi := &file_cells_tree_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreVersionRequest) ProtoMessage() {}

func (x *StoreVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreVersionRequest.ProtoReflect.Descriptor instead.
func (*StoreVersionRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{33}
}

func (x *StoreVersionRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *StoreVersionRequest) GetVersion() *ContentRevision {
	if x != nil {
		return x.Version
	}
	return nil
}

type StoreVersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Version       *ContentRevision       `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	PruneVersions []*ContentRevision     `protobuf:"bytes,2,rep,name=PruneVersions,proto3" json:"PruneVersions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreVersionResponse) Reset() {
	*x = StoreVersionResponse{}
	mi := &file_cells_tree_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreVersionResponse) ProtoMessage() {}

func (x *StoreVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreVersionResponse.ProtoReflect.Descriptor instead.
func (*StoreVersionResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{34}
}

func (x *StoreVersionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StoreVersionResponse) GetVersion() *ContentRevision {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *StoreVersionResponse) GetPruneVersions() []*ContentRevision {
	if x != nil {
		return x.PruneVersions
	}
	return nil
}

type PruneVersionsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UniqueNode      *Node                  `protobuf:"bytes,1,opt,name=UniqueNode,proto3" json:"UniqueNode,omitempty"`
	AllDeletedNodes bool                   `protobuf:"varint,2,opt,name=AllDeletedNodes,proto3" json:"AllDeletedNodes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PruneVersionsRequest) Reset() {
	*x = PruneVersionsRequest{}
	mi := &file_cells_tree_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PruneVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneVersionsRequest) ProtoMessage() {}

func (x *PruneVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneVersionsRequest.ProtoReflect.Descriptor instead.
func (*PruneVersionsRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{35}
}

func (x *PruneVersionsRequest) GetUniqueNode() *Node {
	if x != nil {
		return x.UniqueNode
	}
	return nil
}

func (x *PruneVersionsRequest) GetAllDeletedNodes() bool {
	if x != nil {
		return x.AllDeletedNodes
	}
	return false
}

type PruneVersionsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DeletedVersions []*ContentRevision     `protobuf:"bytes,1,rep,name=DeletedVersions,proto3" json:"DeletedVersions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PruneVersionsResponse) Reset() {
	*x = PruneVersionsResponse{}
	mi := &file_cells_tree_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PruneVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneVersionsResponse) ProtoMessage() {}

func (x *PruneVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneVersionsResponse.ProtoReflect.Descriptor instead.
func (*PruneVersionsResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{36}
}

func (x *PruneVersionsResponse) GetDeletedVersions() []*ContentRevision {
	if x != nil {
		return x.DeletedVersions
	}
	return nil
}

type VersioningPolicy struct {
	state                    protoimpl.MessageState        `protogen:"open.v1"`
	Uuid                     string                        `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Name                     string                        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description              string                        `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	VersionsDataSourceName   string                        `protobuf:"bytes,4,opt,name=VersionsDataSourceName,proto3" json:"VersionsDataSourceName,omitempty"`
	VersionsDataSourceBucket string                        `protobuf:"bytes,5,opt,name=VersionsDataSourceBucket,proto3" json:"VersionsDataSourceBucket,omitempty"`
	MaxTotalSize             int64                         `protobuf:"varint,6,opt,name=MaxTotalSize,proto3" json:"MaxTotalSize,omitempty"`
	MaxSizePerFile           int64                         `protobuf:"varint,7,opt,name=MaxSizePerFile,proto3" json:"MaxSizePerFile,omitempty"`
	IgnoreFilesGreaterThan   int64                         `protobuf:"varint,8,opt,name=IgnoreFilesGreaterThan,proto3" json:"IgnoreFilesGreaterThan,omitempty"`
	KeepPeriods              []*VersioningKeepPeriod       `protobuf:"bytes,9,rep,name=KeepPeriods,proto3" json:"KeepPeriods,omitempty"`
	NodeDeletedStrategy      VersioningNodeDeletedStrategy `protobuf:"varint,10,opt,name=NodeDeletedStrategy,proto3,enum=tree.VersioningNodeDeletedStrategy" json:"NodeDeletedStrategy,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *VersioningPolicy) Reset() {
	*x = VersioningPolicy{}
	mi := &file_cells_tree_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersioningPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersioningPolicy) ProtoMessage() {}

func (x *VersioningPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersioningPolicy.ProtoReflect.Descriptor instead.
func (*VersioningPolicy) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{37}
}

func (x *VersioningPolicy) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VersioningPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VersioningPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VersioningPolicy) GetVersionsDataSourceName() string {
	if x != nil {
		return x.VersionsDataSourceName
	}
	return ""
}

func (x *VersioningPolicy) GetVersionsDataSourceBucket() string {
	if x != nil {
		return x.VersionsDataSourceBucket
	}
	return ""
}

func (x *VersioningPolicy) GetMaxTotalSize() int64 {
	if x != nil {
		return x.MaxTotalSize
	}
	return 0
}

func (x *VersioningPolicy) GetMaxSizePerFile() int64 {
	if x != nil {
		return x.MaxSizePerFile
	}
	return 0
}

func (x *VersioningPolicy) GetIgnoreFilesGreaterThan() int64 {
	if x != nil {
		return x.IgnoreFilesGreaterThan
	}
	return 0
}

func (x *VersioningPolicy) GetKeepPeriods() []*VersioningKeepPeriod {
	if x != nil {
		return x.KeepPeriods
	}
	return nil
}

func (x *VersioningPolicy) GetNodeDeletedStrategy() VersioningNodeDeletedStrategy {
	if x != nil {
		return x.NodeDeletedStrategy
	}
	return VersioningNodeDeletedStrategy_KeepAll
}

type VersioningKeepPeriod struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IntervalStart string                 `protobuf:"bytes,1,opt,name=IntervalStart,proto3" json:"IntervalStart,omitempty"`
	MaxNumber     int32                  `protobuf:"varint,3,opt,name=MaxNumber,proto3" json:"MaxNumber,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersioningKeepPeriod) Reset() {
	*x = VersioningKeepPeriod{}
	mi := &file_cells_tree_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersioningKeepPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersioningKeepPeriod) ProtoMessage() {}

func (x *VersioningKeepPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersioningKeepPeriod.ProtoReflect.Descriptor instead.
func (*VersioningKeepPeriod) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{38}
}

func (x *VersioningKeepPeriod) GetIntervalStart() string {
	if x != nil {
		return x.IntervalStart
	}
	return ""
}

func (x *VersioningKeepPeriod) GetMaxNumber() int32 {
	if x != nil {
		return x.MaxNumber
	}
	return 0
}

type TreeNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *Node                  `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty" gorm:"embedded;"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty" gorm:"column:name;type:VARCHAR(255) NOT NULL;index:,composite:name,length:128;collate:utf8mb4_bin;"`
	Level         int64                  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty" gorm:"column:level;type:SMALLINT NOT NULL;index:,composite:level;"`
	MPath         *MPath                 `protobuf:"bytes,4,opt,name=MPath,proto3" json:"MPath,omitempty" gorm:"embedded;"`
	Hash          string                 `protobuf:"bytes,5,opt,name=Hash,proto3" json:"Hash,omitempty" gorm:"column:hash;type:VARCHAR(40) NOT NULL;unique;"`
	Hash2         string                 `protobuf:"bytes,6,opt,name=Hash2,proto3" json:"Hash2,omitempty" gorm:"column:hash2;type:VARCHAR(50) NOT NULL;unique;"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	mi := &file_cells_tree_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{39}
}

func (x *TreeNode) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *TreeNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TreeNode) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TreeNode) GetMPath() *MPath {
	if x != nil {
		return x.MPath
	}
	return nil
}

func (x *TreeNode) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TreeNode) GetHash2() string {
	if x != nil {
		return x.Hash2
	}
	return ""
}

type MPath struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MPath1        string                 `protobuf:"bytes,1,opt,name=MPath1,proto3" json:"MPath1,omitempty" gorm:"column:mpath1;type:varchar(255) NOT NULL;index:,composite:mp1;"`
	MPath2        string                 `protobuf:"bytes,2,opt,name=MPath2,proto3" json:"MPath2,omitempty" gorm:"column:mpath2;type:varchar(255) NOT NULL;index:,composite:mp2;"`
	MPath3        string                 `protobuf:"bytes,3,opt,name=MPath3,proto3" json:"MPath3,omitempty" gorm:"column:mpath3;type:varchar(255) NOT NULL;index:,composite:mp3;"`
	MPath4        string                 `protobuf:"bytes,4,opt,name=MPath4,proto3" json:"MPath4,omitempty" gorm:"column:mpath4;type:varchar(255) NOT NULL;index:,composite:mp4;"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MPath) Reset() {
	*x = MPath{}
	mi := &file_cells_tree_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPath) ProtoMessage() {}

func (x *MPath) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPath.ProtoReflect.Descriptor instead.
func (*MPath) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{40}
}

func (x *MPath) GetMPath1() string {
	if x != nil {
		return x.MPath1
	}
	return ""
}

func (x *MPath) GetMPath2() string {
	if x != nil {
		return x.MPath2
	}
	return ""
}

func (x *MPath) GetMPath3() string {
	if x != nil {
		return x.MPath3
	}
	return ""
}

func (x *MPath) GetMPath4() string {
	if x != nil {
		return x.MPath4
	}
	return ""
}

type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ------------------------------------
	// Core identification of the node
	// ------------------------------------
	Uuid string   `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty" gorm:"column:uuid;type:VARCHAR(128);primaryKey;"`
	Path string   `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty" gorm:"-:all"`
	Type NodeType `protobuf:"varint,3,opt,name=Type,proto3,enum=tree.NodeType" json:"Type,omitempty" gorm:"column:leaf;type:TINYINT(1) NOT NULL;default:0;"`
	// Size of the file, or cumulated size of folder
	Size int64 `protobuf:"varint,4,opt,name=Size,proto3" json:"Size,omitempty" gorm:"column:size;type:BIGINT NOT NULL;default:0;"`
	// Last modification Timestamp
	MTime int64 `protobuf:"varint,5,opt,name=MTime,proto3" json:"MTime,omitempty" gorm:"column:mtime;type:INT;"`
	// Permission mode, like 0777. Stored as string using custom ModeString field.
	Mode int32 `protobuf:"varint,6,opt,name=Mode,proto3" json:"Mode,omitempty" gorm:"-:all"`
	// String representation of Mode
	ModeString string `protobuf:"bytes,11,opt,name=ModeString,proto3" json:"ModeString,omitempty" gorm:"column:mode;type:VARCHAR(10);notNull;"`
	// Hash of the content if node is a LEAF, Uuid or
	Etag string `protobuf:"bytes,7,opt,name=Etag,proto3" json:"Etag,omitempty" gorm:"column:etag;type:VARCHAR(255);notNull;"`
	// Deprecated - List of successive commits
	//
	// Deprecated: Marked as deprecated in cells-tree.proto.
	Commits []*ChangeLog `protobuf:"bytes,9,rep,name=Commits,proto3" json:"Commits,omitempty" gorm:"-:all"`
	// ------------------------------------
	// Then a free K => V representation of any kind of metadata
	// ------------------------------------
	MetaStore map[string]string `protobuf:"bytes,8,rep,name=MetaStore,proto3" json:"MetaStore,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" gorm:"-:all"`
	// Can be used for output when node is appearing in multiple workspaces
	AppearsIn     []*WorkspaceRelativePath `protobuf:"bytes,10,rep,name=AppearsIn,proto3" json:"AppearsIn,omitempty" gorm:"-:all"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_cells_tree_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{41}
}

func (x *Node) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Node) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Node) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_UNKNOWN
}

func (x *Node) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Node) GetMTime() int64 {
	if x != nil {
		return x.MTime
	}
	return 0
}

func (x *Node) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Node) GetModeString() string {
	if x != nil {
		return x.ModeString
	}
	return ""
}

func (x *Node) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// Deprecated: Marked as deprecated in cells-tree.proto.
func (x *Node) GetCommits() []*ChangeLog {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *Node) GetMetaStore() map[string]string {
	if x != nil {
		return x.MetaStore
	}
	return nil
}

func (x *Node) GetAppearsIn() []*WorkspaceRelativePath {
	if x != nil {
		return x.AppearsIn
	}
	return nil
}

// Used in AppearsIn to signal a node is
// appearing in multiple workspaces in the current context
type WorkspaceRelativePath struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Workspace Id
	WsUuid string `protobuf:"bytes,1,opt,name=WsUuid,proto3" json:"WsUuid,omitempty"`
	// Workspace Label
	WsLabel string `protobuf:"bytes,2,opt,name=WsLabel,proto3" json:"WsLabel,omitempty"`
	// Relative Path inside workspace
	Path string `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	// Workspace slug
	WsSlug string `protobuf:"bytes,4,opt,name=WsSlug,proto3" json:"WsSlug,omitempty"`
	// Workspace Scope
	WsScope       string `protobuf:"bytes,5,opt,name=WsScope,proto3" json:"WsScope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkspaceRelativePath) Reset() {
	*x = WorkspaceRelativePath{}
	mi := &file_cells_tree_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkspaceRelativePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceRelativePath) ProtoMessage() {}

func (x *WorkspaceRelativePath) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceRelativePath.ProtoReflect.Descriptor instead.
func (*WorkspaceRelativePath) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{42}
}

func (x *WorkspaceRelativePath) GetWsUuid() string {
	if x != nil {
		return x.WsUuid
	}
	return ""
}

func (x *WorkspaceRelativePath) GetWsLabel() string {
	if x != nil {
		return x.WsLabel
	}
	return ""
}

func (x *WorkspaceRelativePath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WorkspaceRelativePath) GetWsSlug() string {
	if x != nil {
		return x.WsSlug
	}
	return ""
}

func (x *WorkspaceRelativePath) GetWsScope() string {
	if x != nil {
		return x.WsScope
	}
	return ""
}

// Deprecated - Use ContentRevision instead
type ChangeLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique commit ID
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Human-readable description of what happened
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Unix Timestamp
	MTime int64 `protobuf:"varint,3,opt,name=MTime,proto3" json:"MTime,omitempty"`
	// Content Size at that moment
	Size int64 `protobuf:"varint,4,opt,name=Size,proto3" json:"Size,omitempty"`
	// Arbitrary additional data
	Data []byte `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	// Who performed this action
	OwnerUuid string `protobuf:"bytes,6,opt,name=OwnerUuid,proto3" json:"OwnerUuid,omitempty"`
	// Event that triggered this change
	Event *NodeChangeEvent `protobuf:"bytes,7,opt,name=Event,proto3" json:"Event,omitempty"`
	// Actual location of the stored version
	Location      *Node `protobuf:"bytes,8,opt,name=Location,proto3" json:"Location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeLog) Reset() {
	*x = ChangeLog{}
	mi := &file_cells_tree_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLog) ProtoMessage() {}

func (x *ChangeLog) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLog.ProtoReflect.Descriptor instead.
func (*ChangeLog) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{43}
}

func (x *ChangeLog) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChangeLog) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChangeLog) GetMTime() int64 {
	if x != nil {
		return x.MTime
	}
	return 0
}

func (x *ChangeLog) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChangeLog) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChangeLog) GetOwnerUuid() string {
	if x != nil {
		return x.OwnerUuid
	}
	return ""
}

func (x *ChangeLog) GetEvent() *NodeChangeEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ChangeLog) GetLocation() *Node {
	if x != nil {
		return x.Location
	}
	return nil
}

// ContentRevision is a unique version for the content of a node
type ContentRevision struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique commit ID
	VersionId string `protobuf:"bytes,1,opt,name=VersionId,proto3" json:"VersionId,omitempty"`
	// Human-readable description of what happened
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// This revision is not published
	Draft bool `protobuf:"varint,3,opt,name=Draft,proto3" json:"Draft,omitempty"`
	// This revision is actually the current HEAD
	IsHead bool `protobuf:"varint,4,opt,name=IsHead,proto3" json:"IsHead,omitempty"`
	// Unix Timestamp
	MTime int64 `protobuf:"varint,5,opt,name=MTime,proto3" json:"MTime,omitempty"`
	// Content Size at that moment
	Size int64 `protobuf:"varint,6,opt,name=Size,proto3" json:"Size,omitempty"`
	// Storage ETag
	ETag string `protobuf:"bytes,7,opt,name=ETag,proto3" json:"ETag,omitempty"`
	// Internal Contents Hash
	ContentHash string `protobuf:"bytes,8,opt,name=ContentHash,proto3" json:"ContentHash,omitempty"`
	// Who performed this action - name
	OwnerName string `protobuf:"bytes,9,opt,name=OwnerName,proto3" json:"OwnerName,omitempty"`
	// Who performed this action - uuid
	OwnerUuid string `protobuf:"bytes,10,opt,name=OwnerUuid,proto3" json:"OwnerUuid,omitempty"`
	// Event that triggered this change
	Event *NodeChangeEvent `protobuf:"bytes,11,opt,name=Event,proto3" json:"Event,omitempty"`
	// Actual location of the stored version
	Location      *Node `protobuf:"bytes,12,opt,name=Location,proto3" json:"Location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContentRevision) Reset() {
	*x = ContentRevision{}
	mi := &file_cells_tree_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentRevision) ProtoMessage() {}

func (x *ContentRevision) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentRevision.ProtoReflect.Descriptor instead.
func (*ContentRevision) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{44}
}

func (x *ContentRevision) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *ContentRevision) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContentRevision) GetDraft() bool {
	if x != nil {
		return x.Draft
	}
	return false
}

func (x *ContentRevision) GetIsHead() bool {
	if x != nil {
		return x.IsHead
	}
	return false
}

func (x *ContentRevision) GetMTime() int64 {
	if x != nil {
		return x.MTime
	}
	return 0
}

func (x *ContentRevision) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ContentRevision) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *ContentRevision) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *ContentRevision) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *ContentRevision) GetOwnerUuid() string {
	if x != nil {
		return x.OwnerUuid
	}
	return ""
}

func (x *ContentRevision) GetEvent() *NodeChangeEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ContentRevision) GetLocation() *Node {
	if x != nil {
		return x.Location
	}
	return nil
}

// Search Queries
type Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of nodes paths, exactly matching
	Paths []string `protobuf:"bytes,13,rep,name=Paths,proto3" json:"Paths,omitempty"`
	// Recursive listing of nodes below a given path. Combine with the PathDepth parameter to limit request results
	PathPrefix []string `protobuf:"bytes,1,rep,name=PathPrefix,proto3" json:"PathPrefix,omitempty"`
	// Nodes below these paths will be excluded from results
	ExcludedPathPrefix []string `protobuf:"bytes,19,rep,name=ExcludedPathPrefix,proto3" json:"ExcludedPathPrefix,omitempty"`
	// Range for file size - size bigger than
	MinSize int64 `protobuf:"varint,2,opt,name=MinSize,proto3" json:"MinSize,omitempty"`
	// Range for file size - size is smaller than
	MaxSize int64 `protobuf:"varint,3,opt,name=MaxSize,proto3" json:"MaxSize,omitempty"`
	// Range for modification date - node was modified after this date
	MinDate int64 `protobuf:"varint,4,opt,name=MinDate,proto3" json:"MinDate,omitempty"`
	// Range for modification date - node was modified before this date
	MaxDate int64 `protobuf:"varint,5,opt,name=MaxDate,proto3" json:"MaxDate,omitempty"`
	// Compute MinDate/MaxDate with a Golang duration with a leading comparator (> or <)
	// Duration may contain "s" second, "m" minute, "d" day.
	// Example: ">10m" for files modified before 10minutes ago
	DurationDate string `protobuf:"bytes,16,opt,name=DurationDate,proto3" json:"DurationDate,omitempty"`
	// Limit to a given node type (file or folder)
	Type NodeType `protobuf:"varint,6,opt,name=Type,proto3,enum=tree.NodeType" json:"Type,omitempty"`
	// Lookup by file basename
	FileName string `protobuf:"bytes,7,opt,name=FileName,proto3" json:"FileName,omitempty"`
	// Search in textual content (if search engine has this feature enabled)
	Content string `protobuf:"bytes,8,opt,name=Content,proto3" json:"Content,omitempty"`
	// Search in either filename or content (if search engine has this feature enabled)
	FileNameOrContent string `protobuf:"bytes,17,opt,name=FileNameOrContent,proto3" json:"FileNameOrContent,omitempty"`
	// Bleve-like search query to search for a specific metadata value.
	// When querying nodes, this will redirect this query to the Search Engine. When filtering an input, this will load an in-memory bleve engine to evaluate the node.
	//
	// Bleve query string format is a space separated list of `[+-]key:value`, where node meta keys must be prepended with "Meta."
	// For Example, for tags: `+Meta.usermeta-tags:myvalue`
	FreeString string `protobuf:"bytes,9,opt,name=FreeString,proto3" json:"FreeString,omitempty"`
	// Look for a specific ETag value, may only be useful to lookup for files with __temporary__ ETag
	ETag string `protobuf:"bytes,18,opt,name=ETag,proto3" json:"ETag,omitempty"`
	// Search files by their extension, use pipe symbol | if you wish to allow many extensions.
	// Example png|pdf|jpg
	Extension string `protobuf:"bytes,10,opt,name=Extension,proto3" json:"Extension,omitempty"`
	// Search geographically
	GeoQuery *GeoQuery `protobuf:"bytes,11,opt,name=GeoQuery,proto3" json:"GeoQuery,omitempty"`
	// Restrict recursive listing to a given level of the tree starting from root.
	// Special value "-1" should list only one level in the folder defined by PathPrefix
	PathDepth int32 `protobuf:"varint,12,opt,name=PathDepth,proto3" json:"PathDepth,omitempty"`
	// Preset list of specific node defined by their UUIDs
	UUIDs []string `protobuf:"bytes,15,rep,name=UUIDs,proto3" json:"UUIDs,omitempty"`
	// Negate this query
	Not           bool `protobuf:"varint,14,opt,name=Not,proto3" json:"Not,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_cells_tree_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{45}
}

func (x *Query) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *Query) GetPathPrefix() []string {
	if x != nil {
		return x.PathPrefix
	}
	return nil
}

func (x *Query) GetExcludedPathPrefix() []string {
	if x != nil {
		return x.ExcludedPathPrefix
	}
	return nil
}

func (x *Query) GetMinSize() int64 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *Query) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *Query) GetMinDate() int64 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *Query) GetMaxDate() int64 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *Query) GetDurationDate() string {
	if x != nil {
		return x.DurationDate
	}
	return ""
}

func (x *Query) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_UNKNOWN
}

func (x *Query) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Query) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Query) GetFileNameOrContent() string {
	if x != nil {
		return x.FileNameOrContent
	}
	return ""
}

func (x *Query) GetFreeString() string {
	if x != nil {
		return x.FreeString
	}
	return ""
}

func (x *Query) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *Query) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *Query) GetGeoQuery() *GeoQuery {
	if x != nil {
		return x.GeoQuery
	}
	return nil
}

func (x *Query) GetPathDepth() int32 {
	if x != nil {
		return x.PathDepth
	}
	return 0
}

func (x *Query) GetUUIDs() []string {
	if x != nil {
		return x.UUIDs
	}
	return nil
}

func (x *Query) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

type GeoQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either use a center point and a distance
	Center *GeoPoint `protobuf:"bytes,1,opt,name=Center,proto3" json:"Center,omitempty"`
	// Example formats supported:
	// "5in" "5inch" "7yd" "7yards" "9ft" "9feet" "11km" "11kilometers"
	// "3nm" "3nauticalmiles" "13mm" "13millimeters" "15cm" "15centimeters"
	// "17mi" "17miles" "19m" "19meters"
	// If the unit cannot be determined, the entire string is parsed and the
	// unit of meters is assumed.
	Distance string `protobuf:"bytes,2,opt,name=Distance,proto3" json:"Distance,omitempty"`
	// Or use a bounding box with TopLeft and BottomRight points
	TopLeft       *GeoPoint `protobuf:"bytes,3,opt,name=TopLeft,proto3" json:"TopLeft,omitempty"`
	BottomRight   *GeoPoint `protobuf:"bytes,4,opt,name=BottomRight,proto3" json:"BottomRight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoQuery) Reset() {
	*x = GeoQuery{}
	mi := &file_cells_tree_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoQuery) ProtoMessage() {}

func (x *GeoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoQuery.ProtoReflect.Descriptor instead.
func (*GeoQuery) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{46}
}

func (x *GeoQuery) GetCenter() *GeoPoint {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *GeoQuery) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

func (x *GeoQuery) GetTopLeft() *GeoPoint {
	if x != nil {
		return x.TopLeft
	}
	return nil
}

func (x *GeoQuery) GetBottomRight() *GeoPoint {
	if x != nil {
		return x.BottomRight
	}
	return nil
}

type GeoPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lat           float64                `protobuf:"fixed64,1,opt,name=Lat,proto3" json:"Lat,omitempty"`
	Lon           float64                `protobuf:"fixed64,2,opt,name=Lon,proto3" json:"Lon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	mi := &file_cells_tree_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{47}
}

func (x *GeoPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GeoPoint) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

type StreamChangesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RootPath      string                 `protobuf:"bytes,1,opt,name=RootPath,proto3" json:"RootPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamChangesRequest) Reset() {
	*x = StreamChangesRequest{}
	mi := &file_cells_tree_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChangesRequest) ProtoMessage() {}

func (x *StreamChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChangesRequest.ProtoReflect.Descriptor instead.
func (*StreamChangesRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{48}
}

func (x *StreamChangesRequest) GetRootPath() string {
	if x != nil {
		return x.RootPath
	}
	return ""
}

type NodeChangeEvent struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Type          NodeChangeEvent_EventType `protobuf:"varint,1,opt,name=Type,proto3,enum=tree.NodeChangeEvent_EventType" json:"Type,omitempty"`
	Source        *Node                     `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
	Target        *Node                     `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	Metadata      map[string]string         `protobuf:"bytes,6,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Silent        bool                      `protobuf:"varint,4,opt,name=Silent,proto3" json:"Silent,omitempty"`
	Optimistic    bool                      `protobuf:"varint,5,opt,name=Optimistic,proto3" json:"Optimistic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeChangeEvent) Reset() {
	*x = NodeChangeEvent{}
	mi := &file_cells_tree_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeChangeEvent) ProtoMessage() {}

func (x *NodeChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeChangeEvent.ProtoReflect.Descriptor instead.
func (*NodeChangeEvent) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{49}
}

func (x *NodeChangeEvent) GetType() NodeChangeEvent_EventType {
	if x != nil {
		return x.Type
	}
	return NodeChangeEvent_CREATE
}

func (x *NodeChangeEvent) GetSource() *Node {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *NodeChangeEvent) GetTarget() *Node {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *NodeChangeEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NodeChangeEvent) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *NodeChangeEvent) GetOptimistic() bool {
	if x != nil {
		return x.Optimistic
	}
	return false
}

type IndexEvent struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ErrorDetected     bool                   `protobuf:"varint,1,opt,name=ErrorDetected,proto3" json:"ErrorDetected,omitempty"`
	DataSourceName    string                 `protobuf:"bytes,2,opt,name=DataSourceName,proto3" json:"DataSourceName,omitempty"`
	ErrorPath         string                 `protobuf:"bytes,3,opt,name=ErrorPath,proto3" json:"ErrorPath,omitempty"`
	SessionForceClose string                 `protobuf:"bytes,4,opt,name=SessionForceClose,proto3" json:"SessionForceClose,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *IndexEvent) Reset() {
	*x = IndexEvent{}
	mi := &file_cells_tree_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexEvent) ProtoMessage() {}

func (x *IndexEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexEvent.ProtoReflect.Descriptor instead.
func (*IndexEvent) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{50}
}

func (x *IndexEvent) GetErrorDetected() bool {
	if x != nil {
		return x.ErrorDetected
	}
	return false
}

func (x *IndexEvent) GetDataSourceName() string {
	if x != nil {
		return x.DataSourceName
	}
	return ""
}

func (x *IndexEvent) GetErrorPath() string {
	if x != nil {
		return x.ErrorPath
	}
	return ""
}

func (x *IndexEvent) GetSessionForceClose() string {
	if x != nil {
		return x.SessionForceClose
	}
	return ""
}

type GetEncryptionKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Node          *Node                  `protobuf:"bytes,3,opt,name=Node,proto3" json:"Node,omitempty"`
	Create        bool                   `protobuf:"varint,5,opt,name=Create,proto3" json:"Create,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEncryptionKeyRequest) Reset() {
	*x = GetEncryptionKeyRequest{}
	mi := &file_cells_tree_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEncryptionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEncryptionKeyRequest) ProtoMessage() {}

func (x *GetEncryptionKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEncryptionKeyRequest.ProtoReflect.Descriptor instead.
func (*GetEncryptionKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{51}
}

func (x *GetEncryptionKeyRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GetEncryptionKeyRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GetEncryptionKeyRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *GetEncryptionKeyRequest) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

type GetEncryptionKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEncryptionKeyResponse) Reset() {
	*x = GetEncryptionKeyResponse{}
	mi := &file_cells_tree_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEncryptionKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEncryptionKeyResponse) ProtoMessage() {}

func (x *GetEncryptionKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEncryptionKeyResponse.ProtoReflect.Descriptor instead.
func (*GetEncryptionKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{52}
}

func (x *GetEncryptionKeyResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type SyncChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seq           uint64                 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=nodeId,json=node_id,proto3" json:"nodeId,omitempty"`
	Type          SyncChange_Type        `protobuf:"varint,3,opt,name=type,proto3,enum=tree.SyncChange_Type" json:"type,omitempty"`
	Source        string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Target        string                 `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	Node          *SyncChangeNode        `protobuf:"bytes,6,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncChange) Reset() {
	*x = SyncChange{}
	mi := &file_cells_tree_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncChange) ProtoMessage() {}

func (x *SyncChange) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncChange.ProtoReflect.Descriptor instead.
func (*SyncChange) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{53}
}

func (x *SyncChange) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *SyncChange) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SyncChange) GetType() SyncChange_Type {
	if x != nil {
		return x.Type
	}
	return SyncChange_unknown
}

func (x *SyncChange) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SyncChange) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *SyncChange) GetNode() *SyncChangeNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type SyncChangeNode struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Bytesize             int64                  `protobuf:"varint,1,opt,name=bytesize,proto3" json:"bytesize,omitempty"`
	Md5                  string                 `protobuf:"bytes,2,opt,name=md5,proto3" json:"md5,omitempty"`
	Mtime                int64                  `protobuf:"varint,3,opt,name=mtime,proto3" json:"mtime,omitempty"`
	NodePath             string                 `protobuf:"bytes,4,opt,name=nodePath,json=node_path,proto3" json:"nodePath,omitempty"`
	RepositoryIdentifier string                 `protobuf:"bytes,5,opt,name=repositoryIdentifier,json=repository_identifier,proto3" json:"repositoryIdentifier,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SyncChangeNode) Reset() {
	*x = SyncChangeNode{}
	mi := &file_cells_tree_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncChangeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncChangeNode) ProtoMessage() {}

func (x *SyncChangeNode) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncChangeNode.ProtoReflect.Descriptor instead.
func (*SyncChangeNode) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{54}
}

func (x *SyncChangeNode) GetBytesize() int64 {
	if x != nil {
		return x.Bytesize
	}
	return 0
}

func (x *SyncChangeNode) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *SyncChangeNode) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *SyncChangeNode) GetNodePath() string {
	if x != nil {
		return x.NodePath
	}
	return ""
}

func (x *SyncChangeNode) GetRepositoryIdentifier() string {
	if x != nil {
		return x.RepositoryIdentifier
	}
	return ""
}

type PutSyncChangeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutSyncChangeResponse) Reset() {
	*x = PutSyncChangeResponse{}
	mi := &file_cells_tree_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutSyncChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSyncChangeResponse) ProtoMessage() {}

func (x *PutSyncChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSyncChangeResponse.ProtoReflect.Descriptor instead.
func (*PutSyncChangeResponse) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{55}
}

func (x *PutSyncChangeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PutSyncChangeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SearchSyncChangeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seq           uint64                 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Flatten       bool                   `protobuf:"varint,2,opt,name=flatten,proto3" json:"flatten,omitempty"`
	Prefix        string                 `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	LastSeqOnly   bool                   `protobuf:"varint,4,opt,name=lastSeqOnly,proto3" json:"lastSeqOnly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchSyncChangeRequest) Reset() {
	*x = SearchSyncChangeRequest{}
	mi := &file_cells_tree_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSyncChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSyncChangeRequest) ProtoMessage() {}

func (x *SearchSyncChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_tree_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSyncChangeRequest.ProtoReflect.Descriptor instead.
func (*SearchSyncChangeRequest) Descriptor() ([]byte, []int) {
	return file_cells_tree_proto_rawDescGZIP(), []int{56}
}

func (x *SearchSyncChangeRequest) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *SearchSyncChangeRequest) GetFlatten() bool {
	if x != nil {
		return x.Flatten
	}
	return false
}

func (x *SearchSyncChangeRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *SearchSyncChangeRequest) GetLastSeqOnly() bool {
	if x != nil {
		return x.LastSeqOnly
	}
	return false
}

var File_cells_tree_proto protoreflect.FileDescriptor

var file_cells_tree_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x74, 0x72, 0x65, 0x65, 0x1a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d,
	0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x22, 0x4c, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xf8,
	0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6e, 0x63,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x6e,
	0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xc4,
	0x01, 0x0a, 0x18, 0x57, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x66, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x22, 0x4e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x22, 0x4e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x22, 0x71, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x22, 0x47, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a,
	0x13, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x13, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x49, 0x0a, 0x14, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x13,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x32, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x44, 0x65, 0x73, 0x63, 0x22,
	0xb7, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x72,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x4d, 0x61,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x30, 0x0a, 0x10, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x46, 0x61, 0x63, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x61, 0x63,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x62, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x40, 0x0a, 0x07,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4e, 0x65, 0x77, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4e, 0x65, 0x77, 0x48, 0x65, 0x61, 0x64, 0x22, 0x66, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x9e, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x6c, 0x0a, 0x14, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x41, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x58, 0x0a, 0x15, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe9, 0x03, 0x0a, 0x10, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x4d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e,
	0x12, 0x3c, 0x0a, 0x0b, 0x4b, 0x65, 0x65, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x65, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x0b, 0x4b, 0x65, 0x65, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x55,
	0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x5a, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x65, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x93, 0x03, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02,
	0x68, 0x01, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0xba, 0xb9, 0x19, 0x4a, 0x0a, 0x48, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x28, 0x32, 0x35,
	0x35, 0x29, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x8a, 0x01, 0x1a, 0x2c, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x3a, 0x31, 0x32, 0x38, 0x82, 0x02, 0x0b, 0x75, 0x74, 0x66, 0x38, 0x6d,
	0x62, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x33, 0xba, 0xb9, 0x19,
	0x2f, 0x0a, 0x2d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x11, 0x53, 0x4d, 0x41, 0x4c,
	0x4c, 0x49, 0x4e, 0x54, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x8a, 0x01, 0x10,
	0x2c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x4d, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4d, 0x50,
	0x61, 0x74, 0x68, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x68, 0x01, 0x52, 0x05, 0x4d,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xba, 0xb9, 0x19, 0x20, 0x0a, 0x1e, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x14, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x28, 0x34, 0x30, 0x29, 0x20, 0x4e, 0x4f,
	0x54, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x30, 0x01, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3b,
	0x0a, 0x05, 0x48, 0x61, 0x73, 0x68, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba,
	0xb9, 0x19, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x68, 0x61, 0x73, 0x68, 0x32, 0x12, 0x14, 0x56, 0x41,
	0x52, 0x43, 0x48, 0x41, 0x52, 0x28, 0x35, 0x30, 0x29, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x4e, 0x55,
	0x4c, 0x4c, 0x30, 0x01, 0x52, 0x05, 0x48, 0x61, 0x73, 0x68, 0x32, 0x3a, 0x0a, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0xa0, 0xfa, 0x2b, 0x01, 0x22, 0xd3, 0x02, 0x0a, 0x05, 0x4d, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x4e, 0x0a, 0x06, 0x4d, 0x50, 0x61, 0x74, 0x68, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xba, 0xb9, 0x19, 0x32, 0x0a, 0x30, 0x0a, 0x06, 0x6d, 0x70, 0x61, 0x74, 0x68,
	0x31, 0x12, 0x15, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x20,
	0x4e, 0x4f, 0x54, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x8a, 0x01, 0x0e, 0x2c, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x6d, 0x70, 0x31, 0x52, 0x06, 0x4d, 0x50, 0x61, 0x74, 0x68,
	0x31, 0x12, 0x4e, 0x0a, 0x06, 0x4d, 0x50, 0x61, 0x74, 0x68, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xba, 0xb9, 0x19, 0x32, 0x0a, 0x30, 0x0a, 0x06, 0x6d, 0x70, 0x61, 0x74, 0x68,
	0x32, 0x12, 0x15, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x20,
	0x4e, 0x4f, 0x54, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x8a, 0x01, 0x0e, 0x2c, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x6d, 0x70, 0x32, 0x52, 0x06, 0x4d, 0x50, 0x61, 0x74, 0x68,
	0x32, 0x12, 0x4e, 0x0a, 0x06, 0x4d, 0x50, 0x61, 0x74, 0x68, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xba, 0xb9, 0x19, 0x32, 0x0a, 0x30, 0x0a, 0x06, 0x6d, 0x70, 0x61, 0x74, 0x68,
	0x33, 0x12, 0x15, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x20,
	0x4e, 0x4f, 0x54, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x8a, 0x01, 0x0e, 0x2c, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x6d, 0x70, 0x33, 0x52, 0x06, 0x4d, 0x50, 0x61, 0x74, 0x68,
	0x33, 0x12, 0x4e, 0x0a, 0x06, 0x4d, 0x50, 0x61, 0x74, 0x68, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xba, 0xb9, 0x19, 0x32, 0x0a, 0x30, 0x0a, 0x06, 0x6d, 0x70, 0x61, 0x74, 0x68,
	0x34, 0x12, 0x15, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x20,
	0x4e, 0x4f, 0x54, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x8a, 0x01, 0x0e, 0x2c, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x6d, 0x70, 0x34, 0x52, 0x06, 0x4d, 0x50, 0x61, 0x74, 0x68,
	0x34, 0x3a, 0x0a, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0xa0, 0xfa, 0x2b, 0x01, 0x22, 0xe6, 0x04,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0xb9, 0x19, 0x18, 0x0a, 0x16, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x0c, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x28, 0x31, 0x32, 0x38, 0x29,
	0x28, 0x01, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x24, 0xba, 0xb9, 0x19, 0x20,
	0x0a, 0x1e, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x13, 0x54, 0x49, 0x4e, 0x59, 0x49, 0x4e,
	0x54, 0x28, 0x31, 0x29, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x20, 0xba, 0xb9, 0x19, 0x1c, 0x0a, 0x1a, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x0f, 0x42, 0x49, 0x47, 0x49, 0x4e, 0x54, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x4e,
	0x55, 0x4c, 0x4c, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x4d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xba, 0xb9, 0x19,
	0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x03, 0x49, 0x4e, 0x54, 0x52,
	0x05, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0xba, 0xb9, 0x19, 0x17, 0x0a, 0x15, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x56, 0x41,
	0x52, 0x43, 0x48, 0x41, 0x52, 0x28, 0x31, 0x30, 0x29, 0x50, 0x01, 0x52, 0x0a, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x45, 0x74, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0xb9, 0x19, 0x18, 0x0a, 0x16, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x0c, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x28, 0x32, 0x35, 0x35,
	0x29, 0x50, 0x01, 0x52, 0x04, 0x45, 0x74, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x39, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x49, 0x6e, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x09, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x49, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e,
	0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x0a, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0xa0, 0xfa, 0x2b, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x73, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x57, 0x73, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x73, 0x53, 0x6c, 0x75, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x73, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x57, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x57, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x02,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x4d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xc5, 0x04, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x47, 0x65, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x47, 0x65, 0x6f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x74, 0x68, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x4e, 0x6f, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x6f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x54, 0x6f, 0x70,
	0x4c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x54, 0x6f, 0x70, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2e, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x4c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x4c, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xbf, 0x03, 0x0a, 0x0f, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x79, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x22, 0xa6, 0x01, 0x0a, 0x0a,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x80, 0x02, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x65, 0x65,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a,
	0x14, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x43, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x7f, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x73, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x71, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x71, 0x4f, 0x6e, 0x6c, 0x79, 0x2a, 0x48, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x65, 0x65, 0x70, 0x4c, 0x61,
	0x73, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x02, 0x2a, 0x31, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x45, 0x41, 0x46, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x32, 0x8d, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x72, 0x65, 0x65,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x32, 0x5d, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0e, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x32, 0x5d, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x32, 0x64, 0x0a, 0x1b, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x15, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0xd7, 0x01, 0x0a, 0x0c, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0xfb, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x32, 0xe8, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x56, 0x0a, 0x12,
	0x4e, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x32, 0x43, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x32, 0x13, 0x0a, 0x11, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x32, 0x13,
	0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x32, 0xa6, 0x04, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x50, 0x72,
	0x75, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x30, 0x01, 0x32, 0x65, 0x0a, 0x0e,
	0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0x86, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x10, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3d, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2d, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x79, 0x64, 0x69, 0x6f,
	0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x76, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_cells_tree_proto_rawDescOnce sync.Once
	file_cells_tree_proto_rawDescData []byte
)

func file_cells_tree_proto_rawDescGZIP() []byte {
	file_cells_tree_proto_rawDescOnce.Do(func() {
		file_cells_tree_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cells_tree_proto_rawDesc), len(file_cells_tree_proto_rawDesc)))
	})
	return file_cells_tree_proto_rawDescData
}

var file_cells_tree_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_cells_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_cells_tree_proto_goTypes = []any{
	(VersioningNodeDeletedStrategy)(0),    // 0: tree.VersioningNodeDeletedStrategy
	(NodeType)(0),                         // 1: tree.NodeType
	(NodeChangeEvent_EventType)(0),        // 2: tree.NodeChangeEvent.EventType
	(SyncChange_Type)(0),                  // 3: tree.SyncChange.Type
	(*ReadNodeRequest)(nil),               // 4: tree.ReadNodeRequest
	(*ReadNodeResponse)(nil),              // 5: tree.ReadNodeResponse
	(*ListNodesRequest)(nil),              // 6: tree.ListNodesRequest
	(*ListNodesResponse)(nil),             // 7: tree.ListNodesResponse
	(*WrappingStreamerResponse)(nil),      // 8: tree.WrappingStreamerResponse
	(*CreateNodeRequest)(nil),             // 9: tree.CreateNodeRequest
	(*CreateNodeResponse)(nil),            // 10: tree.CreateNodeResponse
	(*UpdateNodeRequest)(nil),             // 11: tree.UpdateNodeRequest
	(*UpdateNodeResponse)(nil),            // 12: tree.UpdateNodeResponse
	(*DeleteNodeRequest)(nil),             // 13: tree.DeleteNodeRequest
	(*DeleteNodeResponse)(nil),            // 14: tree.DeleteNodeResponse
	(*IndexationSession)(nil),             // 15: tree.IndexationSession
	(*IndexationOperation)(nil),           // 16: tree.IndexationOperation
	(*OpenSessionRequest)(nil),            // 17: tree.OpenSessionRequest
	(*OpenSessionResponse)(nil),           // 18: tree.OpenSessionResponse
	(*FlushSessionRequest)(nil),           // 19: tree.FlushSessionRequest
	(*FlushSessionResponse)(nil),          // 20: tree.FlushSessionResponse
	(*CloseSessionRequest)(nil),           // 21: tree.CloseSessionRequest
	(*CloseSessionResponse)(nil),          // 22: tree.CloseSessionResponse
	(*WatchNodeRequest)(nil),              // 23: tree.WatchNodeRequest
	(*WatchNodeResponse)(nil),             // 24: tree.WatchNodeResponse
	(*SearchRequest)(nil),                 // 25: tree.SearchRequest
	(*SearchFacet)(nil),                   // 26: tree.SearchFacet
	(*SearchPagination)(nil),              // 27: tree.SearchPagination
	(*SearchResponse)(nil),                // 28: tree.SearchResponse
	(*ListVersioningPoliciesRequest)(nil), // 29: tree.ListVersioningPoliciesRequest
	(*CreateVersionRequest)(nil),          // 30: tree.CreateVersionRequest
	(*CreateVersionResponse)(nil),         // 31: tree.CreateVersionResponse
	(*ListVersionsRequest)(nil),           // 32: tree.ListVersionsRequest
	(*ListVersionsResponse)(nil),          // 33: tree.ListVersionsResponse
	(*HeadVersionRequest)(nil),            // 34: tree.HeadVersionRequest
	(*HeadVersionResponse)(nil),           // 35: tree.HeadVersionResponse
	(*DeleteVersionResponse)(nil),         // 36: tree.DeleteVersionResponse
	(*StoreVersionRequest)(nil),           // 37: tree.StoreVersionRequest
	(*StoreVersionResponse)(nil),          // 38: tree.StoreVersionResponse
	(*PruneVersionsRequest)(nil),          // 39: tree.PruneVersionsRequest
	(*PruneVersionsResponse)(nil),         // 40: tree.PruneVersionsResponse
	(*VersioningPolicy)(nil),              // 41: tree.VersioningPolicy
	(*VersioningKeepPeriod)(nil),          // 42: tree.VersioningKeepPeriod
	(*TreeNode)(nil),                      // 43: tree.TreeNode
	(*MPath)(nil),                         // 44: tree.MPath
	(*Node)(nil),                          // 45: tree.Node
	(*WorkspaceRelativePath)(nil),         // 46: tree.WorkspaceRelativePath
	(*ChangeLog)(nil),                     // 47: tree.ChangeLog
	(*ContentRevision)(nil),               // 48: tree.ContentRevision
	(*Query)(nil),                         // 49: tree.Query
	(*GeoQuery)(nil),                      // 50: tree.GeoQuery
	(*GeoPoint)(nil),                      // 51: tree.GeoPoint
	(*StreamChangesRequest)(nil),          // 52: tree.StreamChangesRequest
	(*NodeChangeEvent)(nil),               // 53: tree.NodeChangeEvent
	(*IndexEvent)(nil),                    // 54: tree.IndexEvent
	(*GetEncryptionKeyRequest)(nil),       // 55: tree.GetEncryptionKeyRequest
	(*GetEncryptionKeyResponse)(nil),      // 56: tree.GetEncryptionKeyResponse
	(*SyncChange)(nil),                    // 57: tree.SyncChange
	(*SyncChangeNode)(nil),                // 58: tree.SyncChangeNode
	(*PutSyncChangeResponse)(nil),         // 59: tree.PutSyncChangeResponse
	(*SearchSyncChangeRequest)(nil),       // 60: tree.SearchSyncChangeRequest
	nil,                                   // 61: tree.ListVersionsRequest.FiltersEntry
	nil,                                   // 62: tree.Node.MetaStoreEntry
	nil,                                   // 63: tree.NodeChangeEvent.MetadataEntry
}
var file_cells_tree_proto_depIdxs = []int32{
	45, // 0: tree.ReadNodeRequest.Node:type_name -> tree.Node
	45, // 1: tree.ReadNodeResponse.Node:type_name -> tree.Node
	45, // 2: tree.ListNodesRequest.Node:type_name -> tree.Node
	1,  // 3: tree.ListNodesRequest.FilterType:type_name -> tree.NodeType
	45, // 4: tree.ListNodesResponse.Node:type_name -> tree.Node
	7,  // 5: tree.WrappingStreamerResponse.ListNodesResponse:type_name -> tree.ListNodesResponse
	53, // 6: tree.WrappingStreamerResponse.NodeChangeEvent:type_name -> tree.NodeChangeEvent
	45, // 7: tree.CreateNodeRequest.Node:type_name -> tree.Node
	45, // 8: tree.CreateNodeResponse.Node:type_name -> tree.Node
	45, // 9: tree.UpdateNodeRequest.From:type_name -> tree.Node
	45, // 10: tree.UpdateNodeRequest.To:type_name -> tree.Node
	45, // 11: tree.UpdateNodeResponse.Node:type_name -> tree.Node
	45, // 12: tree.DeleteNodeRequest.Node:type_name -> tree.Node
	45, // 13: tree.IndexationSession.RootNode:type_name -> tree.Node
	15, // 14: tree.OpenSessionRequest.Session:type_name -> tree.IndexationSession
	15, // 15: tree.OpenSessionResponse.Session:type_name -> tree.IndexationSession
	15, // 16: tree.FlushSessionRequest.Session:type_name -> tree.IndexationSession
	15, // 17: tree.FlushSessionResponse.Session:type_name -> tree.IndexationSession
	15, // 18: tree.CloseSessionRequest.Session:type_name -> tree.IndexationSession
	15, // 19: tree.CloseSessionResponse.Session:type_name -> tree.IndexationSession
	45, // 20: tree.WatchNodeRequest.Node:type_name -> tree.Node
	45, // 21: tree.WatchNodeResponse.Node:type_name -> tree.Node
	49, // 22: tree.SearchRequest.Query:type_name -> tree.Query
	45, // 23: tree.SearchResponse.Node:type_name -> tree.Node
	26, // 24: tree.SearchResponse.Facet:type_name -> tree.SearchFacet
	27, // 25: tree.SearchResponse.Pagination:type_name -> tree.SearchPagination
	45, // 26: tree.CreateVersionRequest.Node:type_name -> tree.Node
	53, // 27: tree.CreateVersionRequest.TriggerEvent:type_name -> tree.NodeChangeEvent
	48, // 28: tree.CreateVersionResponse.Version:type_name -> tree.ContentRevision
	45, // 29: tree.ListVersionsRequest.Node:type_name -> tree.Node
	61, // 30: tree.ListVersionsRequest.Filters:type_name -> tree.ListVersionsRequest.FiltersEntry
	48, // 31: tree.ListVersionsResponse.Version:type_name -> tree.ContentRevision
	48, // 32: tree.HeadVersionResponse.Version:type_name -> tree.ContentRevision
	48, // 33: tree.DeleteVersionResponse.DeletedVersion:type_name -> tree.ContentRevision
	45, // 34: tree.StoreVersionRequest.Node:type_name -> tree.Node
	48, // 35: tree.StoreVersionRequest.Version:type_name -> tree.ContentRevision
	48, // 36: tree.StoreVersionResponse.Version:type_name -> tree.ContentRevision
	48, // 37: tree.StoreVersionResponse.PruneVersions:type_name -> tree.ContentRevision
	45, // 38: tree.PruneVersionsRequest.UniqueNode:type_name -> tree.Node
	48, // 39: tree.PruneVersionsResponse.DeletedVersions:type_name -> tree.ContentRevision
	42, // 40: tree.VersioningPolicy.KeepPeriods:type_name -> tree.VersioningKeepPeriod
	0,  // 41: tree.VersioningPolicy.NodeDeletedStrategy:type_name -> tree.VersioningNodeDeletedStrategy
	45, // 42: tree.TreeNode.Node:type_name -> tree.Node
	44, // 43: tree.TreeNode.MPath:type_name -> tree.MPath
	1,  // 44: tree.Node.Type:type_name -> tree.NodeType
	47, // 45: tree.Node.Commits:type_name -> tree.ChangeLog
	62, // 46: tree.Node.MetaStore:type_name -> tree.Node.MetaStoreEntry
	46, // 47: tree.Node.AppearsIn:type_name -> tree.WorkspaceRelativePath
	53, // 48: tree.ChangeLog.Event:type_name -> tree.NodeChangeEvent
	45, // 49: tree.ChangeLog.Location:type_name -> tree.Node
	53, // 50: tree.ContentRevision.Event:type_name -> tree.NodeChangeEvent
	45, // 51: tree.ContentRevision.Location:type_name -> tree.Node
	1,  // 52: tree.Query.Type:type_name -> tree.NodeType
	50, // 53: tree.Query.GeoQuery:type_name -> tree.GeoQuery
	51, // 54: tree.GeoQuery.Center:type_name -> tree.GeoPoint
	51, // 55: tree.GeoQuery.TopLeft:type_name -> tree.GeoPoint
	51, // 56: tree.GeoQuery.BottomRight:type_name -> tree.GeoPoint
	2,  // 57: tree.NodeChangeEvent.Type:type_name -> tree.NodeChangeEvent.EventType
	45, // 58: tree.NodeChangeEvent.Source:type_name -> tree.Node
	45, // 59: tree.NodeChangeEvent.Target:type_name -> tree.Node
	63, // 60: tree.NodeChangeEvent.Metadata:type_name -> tree.NodeChangeEvent.MetadataEntry
	45, // 61: tree.GetEncryptionKeyRequest.Node:type_name -> tree.Node
	3,  // 62: tree.SyncChange.type:type_name -> tree.SyncChange.Type
	58, // 63: tree.SyncChange.node:type_name -> tree.SyncChangeNode
	4,  // 64: tree.NodeProvider.ReadNode:input_type -> tree.ReadNodeRequest
	6,  // 65: tree.NodeProvider.ListNodes:input_type -> tree.ListNodesRequest
	4,  // 66: tree.NodeProviderStreamer.ReadNodeStream:input_type -> tree.ReadNodeRequest
	52, // 67: tree.NodeChangesStreamer.StreamChanges:input_type -> tree.StreamChangesRequest
	53, // 68: tree.NodeChangesReceiverStreamer.PostNodeChanges:input_type -> tree.NodeChangeEvent
	9,  // 69: tree.NodeReceiver.CreateNode:input_type -> tree.CreateNodeRequest
	11, // 70: tree.NodeReceiver.UpdateNode:input_type -> tree.UpdateNodeRequest
	13, // 71: tree.NodeReceiver.DeleteNode:input_type -> tree.DeleteNodeRequest
	9,  // 72: tree.NodeReceiverStream.CreateNodeStream:input_type -> tree.CreateNodeRequest
	11, // 73: tree.NodeReceiverStream.UpdateNodeStream:input_type -> tree.UpdateNodeRequest
	13, // 74: tree.NodeReceiverStream.DeleteNodeStream:input_type -> tree.DeleteNodeRequest
	17, // 75: tree.SessionIndexer.OpenSession:input_type -> tree.OpenSessionRequest
	19, // 76: tree.SessionIndexer.FlushSession:input_type -> tree.FlushSessionRequest
	21, // 77: tree.SessionIndexer.CloseSession:input_type -> tree.CloseSessionRequest
	23, // 78: tree.NodeEventsProvider.WatchNode:input_type -> tree.WatchNodeRequest
	25, // 79: tree.Searcher.Search:input_type -> tree.SearchRequest
	30, // 80: tree.NodeVersioner.CreateVersion:input_type -> tree.CreateVersionRequest
	37, // 81: tree.NodeVersioner.StoreVersion:input_type -> tree.StoreVersionRequest
	32, // 82: tree.NodeVersioner.ListVersions:input_type -> tree.ListVersionsRequest
	34, // 83: tree.NodeVersioner.HeadVersion:input_type -> tree.HeadVersionRequest
	34, // 84: tree.NodeVersioner.DeleteVersion:input_type -> tree.HeadVersionRequest
	39, // 85: tree.NodeVersioner.PruneVersions:input_type -> tree.PruneVersionsRequest
	29, // 86: tree.NodeVersioner.ListVersioningPolicies:input_type -> tree.ListVersioningPoliciesRequest
	55, // 87: tree.FileKeyManager.GetEncryptionKey:input_type -> tree.GetEncryptionKeyRequest
	57, // 88: tree.SyncChanges.Put:input_type -> tree.SyncChange
	60, // 89: tree.SyncChanges.Search:input_type -> tree.SearchSyncChangeRequest
	5,  // 90: tree.NodeProvider.ReadNode:output_type -> tree.ReadNodeResponse
	7,  // 91: tree.NodeProvider.ListNodes:output_type -> tree.ListNodesResponse
	5,  // 92: tree.NodeProviderStreamer.ReadNodeStream:output_type -> tree.ReadNodeResponse
	53, // 93: tree.NodeChangesStreamer.StreamChanges:output_type -> tree.NodeChangeEvent
	53, // 94: tree.NodeChangesReceiverStreamer.PostNodeChanges:output_type -> tree.NodeChangeEvent
	10, // 95: tree.NodeReceiver.CreateNode:output_type -> tree.CreateNodeResponse
	12, // 96: tree.NodeReceiver.UpdateNode:output_type -> tree.UpdateNodeResponse
	14, // 97: tree.NodeReceiver.DeleteNode:output_type -> tree.DeleteNodeResponse
	10, // 98: tree.NodeReceiverStream.CreateNodeStream:output_type -> tree.CreateNodeResponse
	12, // 99: tree.NodeReceiverStream.UpdateNodeStream:output_type -> tree.UpdateNodeResponse
	14, // 100: tree.NodeReceiverStream.DeleteNodeStream:output_type -> tree.DeleteNodeResponse
	18, // 101: tree.SessionIndexer.OpenSession:output_type -> tree.OpenSessionResponse
	20, // 102: tree.SessionIndexer.FlushSession:output_type -> tree.FlushSessionResponse
	22, // 103: tree.SessionIndexer.CloseSession:output_type -> tree.CloseSessionResponse
	24, // 104: tree.NodeEventsProvider.WatchNode:output_type -> tree.WatchNodeResponse
	28, // 105: tree.Searcher.Search:output_type -> tree.SearchResponse
	31, // 106: tree.NodeVersioner.CreateVersion:output_type -> tree.CreateVersionResponse
	38, // 107: tree.NodeVersioner.StoreVersion:output_type -> tree.StoreVersionResponse
	33, // 108: tree.NodeVersioner.ListVersions:output_type -> tree.ListVersionsResponse
	35, // 109: tree.NodeVersioner.HeadVersion:output_type -> tree.HeadVersionResponse
	36, // 110: tree.NodeVersioner.DeleteVersion:output_type -> tree.DeleteVersionResponse
	40, // 111: tree.NodeVersioner.PruneVersions:output_type -> tree.PruneVersionsResponse
	41, // 112: tree.NodeVersioner.ListVersioningPolicies:output_type -> tree.VersioningPolicy
	56, // 113: tree.FileKeyManager.GetEncryptionKey:output_type -> tree.GetEncryptionKeyResponse
	59, // 114: tree.SyncChanges.Put:output_type -> tree.PutSyncChangeResponse
	57, // 115: tree.SyncChanges.Search:output_type -> tree.SyncChange
	90, // [90:116] is the sub-list for method output_type
	64, // [64:90] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_cells_tree_proto_init() }
func file_cells_tree_proto_init() {
	if File_cells_tree_proto != nil {
		return
	}
	file_cells_tree_proto_msgTypes[4].OneofWrappers = []any{
		(*WrappingStreamerResponse_ListNodesResponse)(nil),
		(*WrappingStreamerResponse_NodeChangeEvent)(nil),
	}
	file_cells_tree_proto_msgTypes[24].OneofWrappers = []any{
		(*SearchResponse_Node)(nil),
		(*SearchResponse_Facet)(nil),
		(*SearchResponse_Pagination)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cells_tree_proto_rawDesc), len(file_cells_tree_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   14,
		},
		GoTypes:           file_cells_tree_proto_goTypes,
		DependencyIndexes: file_cells_tree_proto_depIdxs,
		EnumInfos:         file_cells_tree_proto_enumTypes,
		MessageInfos:      file_cells_tree_proto_msgTypes,
	}.Build()
	File_cells_tree_proto = out.File
	file_cells_tree_proto_goTypes = nil
	file_cells_tree_proto_depIdxs = nil
}

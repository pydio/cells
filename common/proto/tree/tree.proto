syntax = "proto3";

package tree;

// ==========================================================
// * Node Provider
// ==========================================================
service NodeProvider{
    rpc ReadNode(ReadNodeRequest) returns (ReadNodeResponse) {};
    rpc ListNodes(ListNodesRequest) returns (stream ListNodesResponse) {};
}

service NodeProviderStreamer{
    rpc ReadNodeStream(stream ReadNodeRequest) returns (stream ReadNodeResponse) {};
}

service NodeChangesStreamer{
    rpc StreamChanges(StreamChangesRequest) returns(stream NodeChangeEvent) {};
}

// Request / Responses Messages
message ReadNodeRequest {
    // Input node
    Node Node = 1;
    // Gather commit information
    bool WithCommits = 2;
    // Get extended stats - For folders, computes ChildrenCount
    bool WithExtendedStats = 3;
    // Used internally for the router ReadNode request, stat the datasource instead of index
    bool ObjectStats = 4;
}

message ReadNodeResponse {
    bool Success = 1;
    Node Node = 2;
}

message ListNodesRequest {
    // Main node used as a parent
    Node Node = 1;
    // Send back all children of the node
    bool Recursive = 2;
    // Send back a list of parent nodes, until the root, including the original node
    bool Ancestors = 3;
    // Sends the list of versions for a given node
    bool WithVersions = 7;
    // Sends the list of commits for a given node (not used)
    bool WithCommits = 8;
    // Limit the number of results
    int64 Limit = 4;
    // Start listing at a given position
    int64 Offset = 5;
    // Filter by node type (LEAF / COLLECTION)
    NodeType FilterType = 6;
}

message ListNodesResponse {
    Node Node = 1;
}

// ==========================================================
// * Node Receiver
// ==========================================================
service NodeReceiver{
    rpc CreateNode(CreateNodeRequest) returns (CreateNodeResponse) {};
    rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse) {};
    rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse) {};
}

service NodeReceiverStream {
    rpc CreateNodeStream (stream CreateNodeRequest) returns (stream CreateNodeResponse) {};
    rpc UpdateNodeStream (stream UpdateNodeRequest) returns (stream UpdateNodeResponse) {};
    rpc DeleteNodeStream (stream DeleteNodeRequest) returns (stream DeleteNodeResponse) {};
}

// Request / Responses Messages
message CreateNodeRequest {
    Node Node = 1;
    bool UpdateIfExists = 2;
    string IndexationSession = 3;
    bool Silent = 4;
}

message CreateNodeResponse {
    bool Success = 1;
    Node Node = 2;
}

message UpdateNodeRequest {
    Node From = 1;
    Node To = 2;
    string IndexationSession = 3;
    bool Silent = 4;
}

message UpdateNodeResponse {
    bool Success = 1;
    Node Node = 2;
}

message DeleteNodeRequest {
    Node Node = 1;
    string IndexationSession = 2;
    bool Silent = 3;
}

message DeleteNodeResponse {
    bool Success = 1;
}

// ==========================================================
// * Session Indexer
// ==========================================================
service SessionIndexer {
    rpc OpenSession(OpenSessionRequest) returns (OpenSessionResponse) {};
    rpc FlushSession(FlushSessionRequest) returns (FlushSessionResponse) {};
    rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse) {};
}

message IndexationSession {
    string Uuid = 1;
    string Description = 2;
    Node RootNode = 3;
    int64 ExpectedOperationsCount = 4;
    int64 CurrentOperationCount = 5;
    bool Silent = 6;
}

message IndexationOperation{
    string SessionUuid = 1;
    string Description = 2;
    int64 Cursor = 3;
}

message OpenSessionRequest{
    IndexationSession Session = 1;
}

message OpenSessionResponse{
    IndexationSession Session = 1;
}

message FlushSessionRequest{
    IndexationSession Session = 1;
}

message FlushSessionResponse{
    IndexationSession Session = 1;
}

message CloseSessionRequest{
    IndexationSession Session = 1;
}

message CloseSessionResponse{
    IndexationSession Session = 1;
}

// ==========================================================
// * Node Events Provider
// ==========================================================
service NodeEventsProvider {
    rpc WatchNode(WatchNodeRequest) returns (stream WatchNodeResponse){};
}

// Request / Responses Messages
message WatchNodeRequest {
    Node Node = 1;
}

message WatchNodeResponse {
    Node Node = 1;
}

// ==========================================================
// * Node Searcher
// ==========================================================
service Searcher{
    rpc Search(SearchRequest) returns (stream SearchResponse){};
}

message SearchRequest{
    // The query object
    Query Query = 1;
    // Limit the number of results
    int32 Size = 2;
    // Start at given position
    int32 From = 3;
    // Load node details
    bool Details = 4;
    // Facet search
    string Facet = 5;
}

message SearchResponse{
    Node Node = 1;
}

// ==========================================================
// * Node Content Reader
// ==========================================================
service NodeContentReader{
    // Content Read / write will not go through gRPC
}

// ==========================================================
// * Node Content Writer
// ==========================================================
service NodeContentWriter{
    // Content Read / write will not go through gRPC
}

// ==========================================================
// * Node Versions Provider
// ==========================================================
service NodeVersioner{
    rpc CreateVersion(CreateVersionRequest) returns (CreateVersionResponse) {};
    rpc StoreVersion(StoreVersionRequest) returns (StoreVersionResponse) {};
    rpc ListVersions(ListVersionsRequest) returns (stream ListVersionsResponse) {};
    rpc HeadVersion(HeadVersionRequest) returns (HeadVersionResponse) {};
    rpc PruneVersions(PruneVersionsRequest) returns (PruneVersionsResponse) {};
}

message CreateVersionRequest{
    Node Node = 1;
    NodeChangeEvent TriggerEvent = 2;
}

message CreateVersionResponse{
    ChangeLog Version = 1;
}

message ListVersionsRequest{
    Node Node = 1;
}

message ListVersionsResponse{
    ChangeLog Version = 1;
}

message HeadVersionRequest{
    Node Node = 1;
    string VersionId = 2;
}

message HeadVersionResponse{
    ChangeLog Version = 1;
}

message StoreVersionRequest{
    Node Node = 1;
    ChangeLog Version = 2;
}

message StoreVersionResponse{
    bool Success = 1;
    repeated ChangeLog PruneVersions = 2;
}

message PruneVersionsRequest{
    Node UniqueNode = 1;
    bool AllDeletedNodes = 2;
}

message PruneVersionsResponse{
    repeated string DeletedVersions = 1;
}

message VersioningPolicy {
    string Uuid = 1;
    string Name = 2;
    string Description = 3;
    string VersionsDataSourceName = 4;
    string VersionsDataSourceBucket = 5;

    int64 MaxTotalSize = 6;
    int64 MaxSizePerFile = 7;
    int64 IgnoreFilesGreaterThan = 8;

    repeated VersioningKeepPeriod KeepPeriods = 9;
}

message VersioningKeepPeriod {
    string IntervalStart = 1;
    int32 MaxNumber = 3;
}

// ==========================================================
// * Standard Messages
// ==========================================================
enum NodeType {
    UNKNOWN = 0;
    LEAF = 1;
    COLLECTION = 2;
}

message Node{

    // ------------------------------------
    // Core identification of the node
    // ------------------------------------
    string Uuid = 1;
    string Path = 2;
    NodeType Type = 3;

    // Size of the file, or cumulated size of folder
    int64 Size = 4;

    // Last modification Timestamp
    int64 MTime = 5;
    // Permission mode, like 0777
    int32 Mode = 6;
    // Hash of the content if node is a LEAF, Uuid or
    string Etag = 7;
    // List of successive commits
    repeated ChangeLog Commits = 9;

    // ------------------------------------
    // Then a free K => V representation of any kind of metadata
    // ------------------------------------
    map <string, string> MetaStore = 8;

    // Can be used for output when node is appearing in multiple workspaces
    repeated WorkspaceRelativePath AppearsIn = 10;
}

// Used in AppearsIn to signal a node is
// appearing in multiple workspaces in the current context
message WorkspaceRelativePath {
    // Workspace Id
    string WsUuid = 1;
    // Workspace Label
    string WsLabel = 2;
    // Relative Path inside workspace
    string Path = 3;
}

message ChangeLog{
    // Unique commit ID
    string Uuid = 1;
    // Human-readable description of what happened
    string Description = 2;
    // Unix Timestamp
    int64 MTime = 3;
    // Content Size at that moment
    int64 Size = 4;
    // Arbitrary additional data
    bytes Data = 5;
    // Who performed this action
    string OwnerUuid = 6;
    // Event that triggered this change
    NodeChangeEvent Event = 7;
}

// Search Queries
message Query {
    // Limit to a given subtree
    repeated string PathPrefix = 1;
    // Range for size
    int64 MinSize = 2;
    int64 MaxSize = 3;
    // Range for date
    int64 MinDate = 4;
    int64 MaxDate = 5;
    // Limit to a given node type
    NodeType Type = 6;
    // Search in filename
    string FileName = 7;
    // Search in content
    string Content = 8;
    // Free Query String (for metadata)
    string FreeString = 9;
    // Search files by extension
    string Extension = 10;
    // Search geographically
    GeoQuery GeoQuery = 11;
}

message GeoQuery {
    // Either use a center point and a distance
    GeoPoint Center = 1;
    // Example formats supported:
    // "5in" "5inch" "7yd" "7yards" "9ft" "9feet" "11km" "11kilometers"
    // "3nm" "3nauticalmiles" "13mm" "13millimeters" "15cm" "15centimeters"
    // "17mi" "17miles" "19m" "19meters"
    // If the unit cannot be determined, the entire string is parsed and the
    // unit of meters is assumed.
    string Distance = 2;

    // Or use a bounding box with TopLeft and BottomRight points
    GeoPoint TopLeft = 3;
    GeoPoint BottomRight = 4;
}

message GeoPoint {
    double Lat = 1;
    double Lon = 2;
}

message StreamChangesRequest{
    string RootPath = 1;
}

message NodeChangeEvent{
    enum EventType {
        CREATE = 0;
        READ = 1;
        UPDATE_PATH = 2;
        UPDATE_CONTENT = 3;
        UPDATE_META = 4;
        UPDATE_USER_META = 6;
        DELETE = 5;
    }
    EventType Type = 1;
    Node Source = 2;
    Node Target = 3;
    map<string,string> Metadata = 6;
    bool Silent = 4;
    bool Optimistic = 5;
}

message IndexEvent {
    bool ErrorDetected = 1;
    string DataSourceName = 2;
    string ErrorPath = 3;

    string SessionForceClose = 4;
}


// ==========================================================
// * Node FileKeyManager
// ==========================================================
service FileKeyManager{
    rpc GetEncryptionKey(GetEncryptionKeyRequest) returns (GetEncryptionKeyResponse) {};
}

message GetEncryptionKeyRequest{
    string User     = 1;
    string Password = 2;
    tree.Node Node  = 3;
    bool Create     = 5;
}

message GetEncryptionKeyResponse{
    bytes Key     = 1;
}

// ==========================================================
// * Changes Service
// ==========================================================

service SyncChanges {
    rpc Put(stream SyncChange) returns (PutSyncChangeResponse) {}
    rpc Search(SearchSyncChangeRequest) returns (stream SyncChange) {}
}

message SyncChange {
    uint64 seq = 1;
    string nodeId = 2 [json_name="node_id"];
    enum Type {
        unknown = 0;
        create = 1;
        delete = 2;
        path = 3;
        content = 4;
    }
    Type type = 3;
    string source = 4;
    string target = 5;
    SyncChangeNode node = 6;
}

message SyncChangeNode {
    int64 bytesize = 1;
    string md5 = 2;
    int64 mtime = 3;
    string nodePath = 4 [json_name="node_path"];
    string repositoryIdentifier = 5 [json_name="repository_identifier"];
}

message PutSyncChangeResponse {
    bool success = 1;
    string msg = 2;
}

message SearchSyncChangeRequest {
    uint64 seq = 1;
    bool flatten = 2;
    string prefix = 3;
    bool lastSeqOnly = 4;
}

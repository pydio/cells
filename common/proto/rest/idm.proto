syntax = "proto3";

package rest;

import "github.com/pydio/cells/common/proto/idm/idm.proto";
import "github.com/pydio/cells/common/service/proto/common.proto";

// Generic Query for limiting results based on resource permissions
message ResourcePolicyQuery {
    enum QueryType {
        CONTEXT = 0;
        ANY = 1;
        NONE = 2;
        USER = 3;
    }
    // The type can be CONTEXT, ANY, NODE or USER. This restricts the may filter out the result set based on their policies
    QueryType Type = 1;
    // Limit to one given user ID
    string UserId = 2;
}

// Roles Search
message SearchRoleRequest {

    // List of atomic queries that will be combined using the Operation type (AND / OR)
    repeated idm.RoleSingleQuery Queries = 1;
    // Policies query for specifying the search context
    ResourcePolicyQuery ResourcePolicyQuery = 7;
    // Start listing at a given position
    int64 Offset = 2;
    // Limit number of results
    int64 Limit = 3;
    // Group results by
    int32 GroupBy = 4;
    // Return counts only, no actual results
    bool CountOnly = 5;
    // Combine Single Queries with AND or OR
    service.OperationType Operation = 6;

}

// Roles Collection
message RolesCollection {
    // List of Roles
    repeated idm.Role Roles = 1;
}

// Users Search
message SearchUserRequest {

    // Atomic queries that will be combined using the Operation Type (AND or OR)
    repeated idm.UserSingleQuery Queries = 1;
    // Policies queries to filter the search context
    ResourcePolicyQuery ResourcePolicyQuery = 7;
    // Start listing at a given position
    int64 Offset = 2;
    // Limit number of results
    int64 Limit = 3;
    // Group by ...
    int32 GroupBy = 4;
    // Return counts only, no actual results
    bool CountOnly = 5;
    // Combine single queries with AND or OR logic
    service.OperationType Operation = 6;

}
// Users Collection
message UsersCollection {
    // List of Groups
    repeated idm.User Groups = 1;
    // List of Users
    repeated idm.User Users = 2;
    // Total number of results
    int32 Total = 3;
}

// Binding Response
message BindResponse {
    bool Success = 1;
}

// Rest request for ACL's
message SearchACLRequest {
    // Atomic queries that will be combined using the OperationType (AND or OR)
    repeated idm.ACLSingleQuery Queries = 1;
    // Start listing at a given position
    int64 Offset = 2;
    // Limit the number of results
    int64 Limit = 3;
    // Group results
    int32 GroupBy = 4;
    // Return counts only, no actual results
    bool CountOnly = 5;
    // Single queries will be combined using this operation AND or OR logic
    service.OperationType Operation = 6;


}

// Response for search request
message ACLCollection {
    // List of ACLs
    repeated idm.ACL ACLs = 1;
    // Total number of results
    int32 Total = 2;

}

// Rest request for searching workspaces
message SearchWorkspaceRequest {

    // Atomic queries that will be combined using the OperationType (AND or OR)
    repeated idm.WorkspaceSingleQuery Queries = 1;
    // Policies queries to filter the search context
    ResourcePolicyQuery ResourcePolicyQuery = 7;
    // Start listing at a given position
    int64 Offset = 2;
    // Limit the number of results
    int64 Limit = 3;
    // Group results
    int32 GroupBy = 4;
    // Return counts only, no actual results
    bool CountOnly = 5;
    // Single queries will be combined using this operation AND or OR logic
    service.OperationType Operation = 6;

}

// Rest response for workspace search
message WorkspaceCollection {
    // List of workspaces
    repeated idm.Workspace Workspaces = 1;
    // Total number of results
    int32 Total = 2;

}

// Collection of UserMeta
message UserMetaCollection {
    repeated idm.UserMeta Metadatas = 1;
}

// Collection of Meta Namespaces
message UserMetaNamespaceCollection {
    // List of user meta Namespaces
    repeated idm.UserMetaNamespace Namespaces = 1;
}

message ListUserMetaTagsRequest{
    // List user meta tags for this namespace
    string Namespace = 1;
}
message ListUserMetaTagsResponse{
    // List of existing tags values
    repeated string Tags = 1;
}
message PutUserMetaTagRequest{
    // Add a tag value for this namespace
    string Namespace = 1;
    // New tag value
    string Tag = 2;
}
message PutUserMetaTagResponse{
    // Operation success
    bool Success = 1;
}
message DeleteUserMetaTagsRequest{
    // Delete tags from this namespace
    string Namespace = 1;
    // Delete this tag
    string Tags = 2;
}
message DeleteUserMetaTagsResponse{
    bool Success = 1;
}

message UserBookmarksRequest {}

// Rest request for revocation. Token is not mandatory, if not set
// request will use current JWT token
message RevokeRequest{
    // Pass a specific Token ID to be revoked. If empty, request will use current JWT
    string TokenId = 1;
}

// Rest response
message RevokeResponse{
    bool Success = 1;
    string Message = 2;
}

message ResetPasswordTokenRequest {
    // Start a ResetPassword workflow for this user
    string UserLogin = 1;
}

message ResetPasswordTokenResponse {
    bool Success = 1;
    string Message = 2;
}

message ResetPasswordRequest {
    // Token generated by the previous step of the reset password workflow
    string ResetPasswordToken = 1;
    // User Login
    string UserLogin = 2;
    // New password to be stored for this user
    string NewPassword = 3;
}

message ResetPasswordResponse {
    bool Success = 1;
    string Message = 2;
}

syntax = "proto3";

package rest;

import "github.com/pydio/cells/common/service/proto/common.proto";
import "github.com/pydio/cells/common/proto/idm/idm.proto";
import "github.com/pydio/cells/common/proto/tree/tree.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// Group collected acls by subjects
message CellAcl {
    // Associated Role ID
    string RoleId = 1;
    // List of Acl Actions and their effect
    repeated idm.ACLAction Actions = 2;
    // Flag for detecting if it's a user role or not
    bool IsUserRole = 3;
    // Associated User
    idm.User User = 4;
    // Associated Group
    idm.User Group = 5;
    // Associated Role
    idm.Role Role = 6;
}

// Model for representing a Cell
message Cell {
    // Unique Id of the Cell
    string Uuid = 1;
    // Label of the Cell (max 500 chars)
    string Label = 2 [(validator.field) = {length_lt: 500}];
    // Long description of the Cell (max 1000 chars)
    string Description = 3 [(validator.field) = {length_lt: 1000}];
    // Nodes attached as roots to this Cell
    repeated tree.Node RootNodes = 4;
    // Access control for this Cell
    map <string,CellAcl> ACLs = 5;
    // Associated access policies
    repeated service.ResourcePolicy Policies = 6;
    // Whether these policies are currently editable
    bool PoliciesContextEditable = 7;
}

// Known values for link permissions
enum ShareLinkAccessType {
    NoAccess = 0;
    Preview = 1;
    Download = 2;
    Upload = 3;
}

message ShareLinkTargetUser {
    string Display = 1;
    int32 DownloadCount = 2;
}

// Model for representing a public link
message ShareLink {
    // Internal identifier of the link
    string Uuid = 1;
    // Unique Hash for accessing the link
    string LinkHash = 2;
    // Full URL for accessing the link
    string LinkUrl = 3;
    // Label of the Link (max 500 chars)
    string Label = 4 [(validator.field) = {length_lt: 500}];
    // Description of the Link (max 1000 chars)
    string Description = 5 [(validator.field) = {length_lt: 1000}];
    // Temporary user Uuid used to login automatically when accessing this link
    string UserUuid = 6;
    // Temporary user Login used to login automatically when accessing this link
    string UserLogin = 7;
    // Whether a password is required or not to access the link
    bool PasswordRequired = 8;
    // Timestamp of start date for enabling the share (not implemented yet)
    int64 AccessStart = 9;
    // Timestamp after which the share is disabled
    int64 AccessEnd = 10;
    // Maximum number of downloads until expiration
    int64 MaxDownloads = 11;
    // Current number of downloads
    int64 CurrentDownloads = 12;

    // Display Template for loading the public link
    string ViewTemplateName = 13;

    // TargetUsers can be used to restrict access
    map<string,ShareLinkTargetUser> TargetUsers = 14;
    // RestrictToTargetUsers enable users restriction
    bool RestrictToTargetUsers = 15;
    // Nodes in the tree that serve as root to this link
    repeated tree.Node RootNodes = 16;
    // Specific permissions for public links
    repeated ShareLinkAccessType Permissions = 17;
    // Security policies
    repeated service.ResourcePolicy Policies = 18;
    // Whether policies are currently editable or not
    bool PoliciesContextEditable = 19;
}

// Request for creating a Cell
message PutCellRequest {
    // Content of the Cell (Room is legacy name)
    Cell Room = 1;
    // Whether to create a dedicated folder for this cell at creation
    bool CreateEmptyRoot = 2;
}

// Load a Cell request
message GetCellRequest {
    // Cell Uuid
    string Uuid = 1;
}

// Request for deleting a Cell
message DeleteCellRequest {
    // Cell Uuid
    string Uuid = 1;
}

message DeleteCellResponse {
    // Delete result
    bool Success = 1;
}

message GetShareLinkRequest {
    // Link Uuid
    string Uuid = 1;
}

// Request for create/update a link
message PutShareLinkRequest {
    // Content of the link to create
    ShareLink ShareLink = 1;
    // Whether it has Password enabled
    bool PasswordEnabled = 2;
    // Set if switching from no password to password
    string CreatePassword = 3;
    // Set if updating an existing password
    string UpdatePassword = 4;
    // Change the ShareLink Hash with a custom value
    string UpdateCustomHash = 5;
}

// Request for deleting a link
message DeleteShareLinkRequest {
    // Id of Link to delete
    string Uuid = 1;
}

// Response for deleting a share link
message DeleteShareLinkResponse {
    // If delete sucess or failed
    bool Success = 1;
}

message ListSharedResourcesRequest{
    enum ListShareType {
        ANY   = 0;
        LINKS = 1;
        CELLS = 2;
    }
    // Filter output to a given type
    ListShareType ShareType = 1;

    // Will restrict the list to the shares readable by a specific subject.
    // In user-context, current user is used by default. In admin-context, this can
    // be any resource policy subject
    string Subject = 3;
    // If true, will also check filter the output to shares actually owned by subject
    bool OwnedBySubject = 4;

    // Start listing at a given offset
    int32 Offset = 5;
    // Limit number of results
    int32 Limit = 6;
}

message ListSharedResourcesResponse{
    // Container for ShareLink or Cell
    message SharedResource {
        tree.Node Node = 1;
        ShareLink Link = 2;
        repeated Cell Cells = 3;
    }
    // Actual results
    repeated SharedResource Resources = 1;

    // Cursor informations
    int32 Offset = 2;
    int32 Limit = 3;
    int32 Total = 4;
}

message UpdateSharePoliciesRequest{
    // Cell or Link UUID
    string Uuid = 1;
    // List of policies to update
    repeated service.ResourcePolicy Policies = 2;
}

message UpdateSharePoliciesResponse{
    bool Success = 1;
    repeated service.ResourcePolicy Policies = 2;
    bool PoliciesContextEditable = 3;
}
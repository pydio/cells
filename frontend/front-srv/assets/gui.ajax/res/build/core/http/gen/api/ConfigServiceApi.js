/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelCtlService = require('../model/CtlService');

var _modelCtlService2 = _interopRequireDefault(_modelCtlService);

var _modelEncryptionAdminCreateKeyRequest = require('../model/EncryptionAdminCreateKeyRequest');

var _modelEncryptionAdminCreateKeyRequest2 = _interopRequireDefault(_modelEncryptionAdminCreateKeyRequest);

var _modelEncryptionAdminCreateKeyResponse = require('../model/EncryptionAdminCreateKeyResponse');

var _modelEncryptionAdminCreateKeyResponse2 = _interopRequireDefault(_modelEncryptionAdminCreateKeyResponse);

var _modelEncryptionAdminDeleteKeyRequest = require('../model/EncryptionAdminDeleteKeyRequest');

var _modelEncryptionAdminDeleteKeyRequest2 = _interopRequireDefault(_modelEncryptionAdminDeleteKeyRequest);

var _modelEncryptionAdminDeleteKeyResponse = require('../model/EncryptionAdminDeleteKeyResponse');

var _modelEncryptionAdminDeleteKeyResponse2 = _interopRequireDefault(_modelEncryptionAdminDeleteKeyResponse);

var _modelEncryptionAdminExportKeyRequest = require('../model/EncryptionAdminExportKeyRequest');

var _modelEncryptionAdminExportKeyRequest2 = _interopRequireDefault(_modelEncryptionAdminExportKeyRequest);

var _modelEncryptionAdminExportKeyResponse = require('../model/EncryptionAdminExportKeyResponse');

var _modelEncryptionAdminExportKeyResponse2 = _interopRequireDefault(_modelEncryptionAdminExportKeyResponse);

var _modelEncryptionAdminImportKeyRequest = require('../model/EncryptionAdminImportKeyRequest');

var _modelEncryptionAdminImportKeyRequest2 = _interopRequireDefault(_modelEncryptionAdminImportKeyRequest);

var _modelEncryptionAdminImportKeyResponse = require('../model/EncryptionAdminImportKeyResponse');

var _modelEncryptionAdminImportKeyResponse2 = _interopRequireDefault(_modelEncryptionAdminImportKeyResponse);

var _modelEncryptionAdminListKeysRequest = require('../model/EncryptionAdminListKeysRequest');

var _modelEncryptionAdminListKeysRequest2 = _interopRequireDefault(_modelEncryptionAdminListKeysRequest);

var _modelEncryptionAdminListKeysResponse = require('../model/EncryptionAdminListKeysResponse');

var _modelEncryptionAdminListKeysResponse2 = _interopRequireDefault(_modelEncryptionAdminListKeysResponse);

var _modelObjectDataSource = require('../model/ObjectDataSource');

var _modelObjectDataSource2 = _interopRequireDefault(_modelObjectDataSource);

var _modelRestConfiguration = require('../model/RestConfiguration');

var _modelRestConfiguration2 = _interopRequireDefault(_modelRestConfiguration);

var _modelRestControlServiceRequest = require('../model/RestControlServiceRequest');

var _modelRestControlServiceRequest2 = _interopRequireDefault(_modelRestControlServiceRequest);

var _modelRestDataSourceCollection = require('../model/RestDataSourceCollection');

var _modelRestDataSourceCollection2 = _interopRequireDefault(_modelRestDataSourceCollection);

var _modelRestDeleteDataSourceResponse = require('../model/RestDeleteDataSourceResponse');

var _modelRestDeleteDataSourceResponse2 = _interopRequireDefault(_modelRestDeleteDataSourceResponse);

var _modelRestDiscoveryResponse = require('../model/RestDiscoveryResponse');

var _modelRestDiscoveryResponse2 = _interopRequireDefault(_modelRestDiscoveryResponse);

var _modelRestListPeerFoldersRequest = require('../model/RestListPeerFoldersRequest');

var _modelRestListPeerFoldersRequest2 = _interopRequireDefault(_modelRestListPeerFoldersRequest);

var _modelRestListPeersAddressesResponse = require('../model/RestListPeersAddressesResponse');

var _modelRestListPeersAddressesResponse2 = _interopRequireDefault(_modelRestListPeersAddressesResponse);

var _modelRestListProcessesRequest = require('../model/RestListProcessesRequest');

var _modelRestListProcessesRequest2 = _interopRequireDefault(_modelRestListProcessesRequest);

var _modelRestListProcessesResponse = require('../model/RestListProcessesResponse');

var _modelRestListProcessesResponse2 = _interopRequireDefault(_modelRestListProcessesResponse);

var _modelRestNodesCollection = require('../model/RestNodesCollection');

var _modelRestNodesCollection2 = _interopRequireDefault(_modelRestNodesCollection);

var _modelRestOpenApiResponse = require('../model/RestOpenApiResponse');

var _modelRestOpenApiResponse2 = _interopRequireDefault(_modelRestOpenApiResponse);

var _modelRestServiceCollection = require('../model/RestServiceCollection');

var _modelRestServiceCollection2 = _interopRequireDefault(_modelRestServiceCollection);

var _modelRestVersioningPolicyCollection = require('../model/RestVersioningPolicyCollection');

var _modelRestVersioningPolicyCollection2 = _interopRequireDefault(_modelRestVersioningPolicyCollection);

var _modelTreeVersioningPolicy = require('../model/TreeVersioningPolicy');

var _modelTreeVersioningPolicy2 = _interopRequireDefault(_modelTreeVersioningPolicy);

/**
* ConfigService service.
* @module api/ConfigServiceApi
* @version 1.0
*/

var ConfigServiceApi = (function () {

  /**
  * Constructs a new ConfigServiceApi. 
  * @alias module:api/ConfigServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function ConfigServiceApi(apiClient) {
    _classCallCheck(this, ConfigServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Publish Forms definition for building screens in frontend
   * @param {String} serviceName 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDiscoveryResponse} and HTTP response
   */

  ConfigServiceApi.prototype.configFormsDiscoveryWithHttpInfo = function configFormsDiscoveryWithHttpInfo(serviceName) {
    var postBody = null;

    // verify the required parameter 'serviceName' is set
    if (serviceName === undefined || serviceName === null) {
      throw new Error("Missing the required parameter 'serviceName' when calling configFormsDiscovery");
    }

    var pathParams = {
      'ServiceName': serviceName
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestDiscoveryResponse2['default'];

    return this.apiClient.callApi('/config/discovery/forms/{ServiceName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Publish Forms definition for building screens in frontend
   * @param {String} serviceName 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDiscoveryResponse}
   */

  ConfigServiceApi.prototype.configFormsDiscovery = function configFormsDiscovery(serviceName) {
    return this.configFormsDiscoveryWithHttpInfo(serviceName).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * [Not Implemented]  Start/Stop a service
   * @param {module:model/RestControlServiceRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CtlService} and HTTP response
   */

  ConfigServiceApi.prototype.controlServiceWithHttpInfo = function controlServiceWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling controlService");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelCtlService2['default'];

    return this.apiClient.callApi('/config/ctl', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * [Not Implemented]  Start/Stop a service
   * @param {module:model/RestControlServiceRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CtlService}
   */

  ConfigServiceApi.prototype.controlService = function controlService(body) {
    return this.controlServiceWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Create a new master key
   * @param {module:model/EncryptionAdminCreateKeyRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminCreateKeyResponse} and HTTP response
   */

  ConfigServiceApi.prototype.createEncryptionKeyWithHttpInfo = function createEncryptionKeyWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createEncryptionKey");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelEncryptionAdminCreateKeyResponse2['default'];

    return this.apiClient.callApi('/config/encryption/create', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Create a new master key
   * @param {module:model/EncryptionAdminCreateKeyRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminCreateKeyResponse}
   */

  ConfigServiceApi.prototype.createEncryptionKey = function createEncryptionKey(body) {
    return this.createEncryptionKeyWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Delete a datasource
   * @param {String} name 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDeleteDataSourceResponse} and HTTP response
   */

  ConfigServiceApi.prototype.deleteDataSourceWithHttpInfo = function deleteDataSourceWithHttpInfo(name) {
    var postBody = null;

    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error("Missing the required parameter 'name' when calling deleteDataSource");
    }

    var pathParams = {
      'Name': name
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestDeleteDataSourceResponse2['default'];

    return this.apiClient.callApi('/config/datasource/{Name}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Delete a datasource
   * @param {String} name 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDeleteDataSourceResponse}
   */

  ConfigServiceApi.prototype.deleteDataSource = function deleteDataSource(name) {
    return this.deleteDataSourceWithHttpInfo(name).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Delete an existing master key
   * @param {module:model/EncryptionAdminDeleteKeyRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminDeleteKeyResponse} and HTTP response
   */

  ConfigServiceApi.prototype.deleteEncryptionKeyWithHttpInfo = function deleteEncryptionKeyWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling deleteEncryptionKey");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelEncryptionAdminDeleteKeyResponse2['default'];

    return this.apiClient.callApi('/config/encryption/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Delete an existing master key
   * @param {module:model/EncryptionAdminDeleteKeyRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminDeleteKeyResponse}
   */

  ConfigServiceApi.prototype.deleteEncryptionKey = function deleteEncryptionKey(body) {
    return this.deleteEncryptionKeyWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Publish available endpoints
   * @param {Object} opts Optional parameters
   * @param {String} opts.endpointType 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDiscoveryResponse} and HTTP response
   */

  ConfigServiceApi.prototype.endpointsDiscoveryWithHttpInfo = function endpointsDiscoveryWithHttpInfo(opts) {
    opts = opts || {};
    var postBody = null;

    var pathParams = {};
    var queryParams = {
      'EndpointType': opts['endpointType']
    };
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestDiscoveryResponse2['default'];

    return this.apiClient.callApi('/config/discovery', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Publish available endpoints
   * @param {Object} opts Optional parameters
   * @param {String} opts.endpointType 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDiscoveryResponse}
   */

  ConfigServiceApi.prototype.endpointsDiscovery = function endpointsDiscovery(opts) {
    return this.endpointsDiscoveryWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Export a master key for backup purpose, protected with a password
   * @param {module:model/EncryptionAdminExportKeyRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminExportKeyResponse} and HTTP response
   */

  ConfigServiceApi.prototype.exportEncryptionKeyWithHttpInfo = function exportEncryptionKeyWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling exportEncryptionKey");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelEncryptionAdminExportKeyResponse2['default'];

    return this.apiClient.callApi('/config/encryption/export', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Export a master key for backup purpose, protected with a password
   * @param {module:model/EncryptionAdminExportKeyRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminExportKeyResponse}
   */

  ConfigServiceApi.prototype.exportEncryptionKey = function exportEncryptionKey(body) {
    return this.exportEncryptionKeyWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Generic config Get using a full path in the config tree
   * @param {String} fullPath 
   * @param {Object} opts Optional parameters
   * @param {String} opts.data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestConfiguration} and HTTP response
   */

  ConfigServiceApi.prototype.getConfigWithHttpInfo = function getConfigWithHttpInfo(fullPath, opts) {
    opts = opts || {};
    var postBody = null;

    // verify the required parameter 'fullPath' is set
    if (fullPath === undefined || fullPath === null) {
      throw new Error("Missing the required parameter 'fullPath' when calling getConfig");
    }

    var pathParams = {
      'FullPath': fullPath
    };
    var queryParams = {
      'Data': opts['data']
    };
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestConfiguration2['default'];

    return this.apiClient.callApi('/config/{FullPath}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Generic config Get using a full path in the config tree
   * @param {String} fullPath 
   * @param {Object} opts Optional parameters
   * @param {String} opts.data 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestConfiguration}
   */

  ConfigServiceApi.prototype.getConfig = function getConfig(fullPath, opts) {
    return this.getConfigWithHttpInfo(fullPath, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Load datasource information
   * @param {String} name 
   * @param {Object} opts Optional parameters
   * @param {Boolean} opts.disabled 
   * @param {module:model/String} opts.storageType  (default to LOCAL)
   * @param {String} opts.objectsServiceName 
   * @param {String} opts.objectsHost 
   * @param {Number} opts.objectsPort 
   * @param {Boolean} opts.objectsSecure 
   * @param {String} opts.objectsBucket 
   * @param {String} opts.objectsBaseFolder 
   * @param {String} opts.apiKey 
   * @param {String} opts.apiSecret 
   * @param {String} opts.peerAddress 
   * @param {Boolean} opts.watch 
   * @param {module:model/String} opts.encryptionMode  (default to CLEAR)
   * @param {String} opts.encryptionKey 
   * @param {String} opts.versioningPolicyName 
   * @param {Number} opts.creationDate 
   * @param {Number} opts.lastSynchronizationDate 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectDataSource} and HTTP response
   */

  ConfigServiceApi.prototype.getDataSourceWithHttpInfo = function getDataSourceWithHttpInfo(name, opts) {
    opts = opts || {};
    var postBody = null;

    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error("Missing the required parameter 'name' when calling getDataSource");
    }

    var pathParams = {
      'Name': name
    };
    var queryParams = {
      'Disabled': opts['disabled'],
      'StorageType': opts['storageType'],
      'ObjectsServiceName': opts['objectsServiceName'],
      'ObjectsHost': opts['objectsHost'],
      'ObjectsPort': opts['objectsPort'],
      'ObjectsSecure': opts['objectsSecure'],
      'ObjectsBucket': opts['objectsBucket'],
      'ObjectsBaseFolder': opts['objectsBaseFolder'],
      'ApiKey': opts['apiKey'],
      'ApiSecret': opts['apiSecret'],
      'PeerAddress': opts['peerAddress'],
      'Watch': opts['watch'],
      'EncryptionMode': opts['encryptionMode'],
      'EncryptionKey': opts['encryptionKey'],
      'VersioningPolicyName': opts['versioningPolicyName'],
      'CreationDate': opts['creationDate'],
      'LastSynchronizationDate': opts['lastSynchronizationDate']
    };
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelObjectDataSource2['default'];

    return this.apiClient.callApi('/config/datasource/{Name}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Load datasource information
   * @param {String} name 
   * @param {Object} opts Optional parameters
   * @param {Boolean} opts.disabled 
   * @param {module:model/String} opts.storageType  (default to LOCAL)
   * @param {String} opts.objectsServiceName 
   * @param {String} opts.objectsHost 
   * @param {Number} opts.objectsPort 
   * @param {Boolean} opts.objectsSecure 
   * @param {String} opts.objectsBucket 
   * @param {String} opts.objectsBaseFolder 
   * @param {String} opts.apiKey 
   * @param {String} opts.apiSecret 
   * @param {String} opts.peerAddress 
   * @param {Boolean} opts.watch 
   * @param {module:model/String} opts.encryptionMode  (default to CLEAR)
   * @param {String} opts.encryptionKey 
   * @param {String} opts.versioningPolicyName 
   * @param {Number} opts.creationDate 
   * @param {Number} opts.lastSynchronizationDate 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectDataSource}
   */

  ConfigServiceApi.prototype.getDataSource = function getDataSource(name, opts) {
    return this.getDataSourceWithHttpInfo(name, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Load a given versioning policy
   * @param {String} uuid 
   * @param {Object} opts Optional parameters
   * @param {String} opts.name 
   * @param {String} opts.description 
   * @param {String} opts.versionsDataSourceName 
   * @param {String} opts.versionsDataSourceBucket 
   * @param {String} opts.maxTotalSize 
   * @param {String} opts.maxSizePerFile 
   * @param {String} opts.ignoreFilesGreaterThan 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeVersioningPolicy} and HTTP response
   */

  ConfigServiceApi.prototype.getVersioningPolicyWithHttpInfo = function getVersioningPolicyWithHttpInfo(uuid, opts) {
    opts = opts || {};
    var postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling getVersioningPolicy");
    }

    var pathParams = {
      'Uuid': uuid
    };
    var queryParams = {
      'Name': opts['name'],
      'Description': opts['description'],
      'VersionsDataSourceName': opts['versionsDataSourceName'],
      'VersionsDataSourceBucket': opts['versionsDataSourceBucket'],
      'MaxTotalSize': opts['maxTotalSize'],
      'MaxSizePerFile': opts['maxSizePerFile'],
      'IgnoreFilesGreaterThan': opts['ignoreFilesGreaterThan']
    };
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelTreeVersioningPolicy2['default'];

    return this.apiClient.callApi('/config/versioning/{Uuid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Load a given versioning policy
   * @param {String} uuid 
   * @param {Object} opts Optional parameters
   * @param {String} opts.name 
   * @param {String} opts.description 
   * @param {String} opts.versionsDataSourceName 
   * @param {String} opts.versionsDataSourceBucket 
   * @param {String} opts.maxTotalSize 
   * @param {String} opts.maxSizePerFile 
   * @param {String} opts.ignoreFilesGreaterThan 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeVersioningPolicy}
   */

  ConfigServiceApi.prototype.getVersioningPolicy = function getVersioningPolicy(uuid, opts) {
    return this.getVersioningPolicyWithHttpInfo(uuid, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Import a previously exported master key, requires the password created at export time
   * @param {module:model/EncryptionAdminImportKeyRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminImportKeyResponse} and HTTP response
   */

  ConfigServiceApi.prototype.importEncryptionKeyWithHttpInfo = function importEncryptionKeyWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling importEncryptionKey");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelEncryptionAdminImportKeyResponse2['default'];

    return this.apiClient.callApi('/config/encryption/import', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Import a previously exported master key, requires the password created at export time
   * @param {module:model/EncryptionAdminImportKeyRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminImportKeyResponse}
   */

  ConfigServiceApi.prototype.importEncryptionKey = function importEncryptionKey(body) {
    return this.importEncryptionKeyWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List all defined datasources
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDataSourceCollection} and HTTP response
   */

  ConfigServiceApi.prototype.listDataSourcesWithHttpInfo = function listDataSourcesWithHttpInfo() {
    var postBody = null;

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestDataSourceCollection2['default'];

    return this.apiClient.callApi('/config/datasource', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List all defined datasources
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDataSourceCollection}
   */

  ConfigServiceApi.prototype.listDataSources = function listDataSources() {
    return this.listDataSourcesWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List registered master keys
   * @param {module:model/EncryptionAdminListKeysRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EncryptionAdminListKeysResponse} and HTTP response
   */

  ConfigServiceApi.prototype.listEncryptionKeysWithHttpInfo = function listEncryptionKeysWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling listEncryptionKeys");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelEncryptionAdminListKeysResponse2['default'];

    return this.apiClient.callApi('/config/encryption/list', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List registered master keys
   * @param {module:model/EncryptionAdminListKeysRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EncryptionAdminListKeysResponse}
   */

  ConfigServiceApi.prototype.listEncryptionKeys = function listEncryptionKeys(body) {
    return this.listEncryptionKeysWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List folders on a peer, starting from root
   * @param {String} peerAddress 
   * @param {module:model/RestListPeerFoldersRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestNodesCollection} and HTTP response
   */

  ConfigServiceApi.prototype.listPeerFoldersWithHttpInfo = function listPeerFoldersWithHttpInfo(peerAddress, body) {
    var postBody = body;

    // verify the required parameter 'peerAddress' is set
    if (peerAddress === undefined || peerAddress === null) {
      throw new Error("Missing the required parameter 'peerAddress' when calling listPeerFolders");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling listPeerFolders");
    }

    var pathParams = {
      'PeerAddress': peerAddress
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestNodesCollection2['default'];

    return this.apiClient.callApi('/config/peers/{PeerAddress}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List folders on a peer, starting from root
   * @param {String} peerAddress 
   * @param {module:model/RestListPeerFoldersRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestNodesCollection}
   */

  ConfigServiceApi.prototype.listPeerFolders = function listPeerFolders(peerAddress, body) {
    return this.listPeerFoldersWithHttpInfo(peerAddress, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List all detected peers (servers on which the app is running)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListPeersAddressesResponse} and HTTP response
   */

  ConfigServiceApi.prototype.listPeersAddressesWithHttpInfo = function listPeersAddressesWithHttpInfo() {
    var postBody = null;

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestListPeersAddressesResponse2['default'];

    return this.apiClient.callApi('/config/peers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List all detected peers (servers on which the app is running)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListPeersAddressesResponse}
   */

  ConfigServiceApi.prototype.listPeersAddresses = function listPeersAddresses() {
    return this.listPeersAddressesWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List running Processes, with option PeerId or ServiceName filter
   * @param {module:model/RestListProcessesRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestListProcessesResponse} and HTTP response
   */

  ConfigServiceApi.prototype.listProcessesWithHttpInfo = function listProcessesWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling listProcesses");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestListProcessesResponse2['default'];

    return this.apiClient.callApi('/config/processes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List running Processes, with option PeerId or ServiceName filter
   * @param {module:model/RestListProcessesRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestListProcessesResponse}
   */

  ConfigServiceApi.prototype.listProcesses = function listProcesses(body) {
    return this.listProcessesWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List all services and their status
   * @param {Object} opts Optional parameters
   * @param {module:model/String} opts.statusFilter  (default to ANY)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestServiceCollection} and HTTP response
   */

  ConfigServiceApi.prototype.listServicesWithHttpInfo = function listServicesWithHttpInfo(opts) {
    opts = opts || {};
    var postBody = null;

    var pathParams = {};
    var queryParams = {
      'StatusFilter': opts['statusFilter']
    };
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestServiceCollection2['default'];

    return this.apiClient.callApi('/config/ctl', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List all services and their status
   * @param {Object} opts Optional parameters
   * @param {module:model/String} opts.statusFilter  (default to ANY)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestServiceCollection}
   */

  ConfigServiceApi.prototype.listServices = function listServices(opts) {
    return this.listServicesWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List all defined versioning policies
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestVersioningPolicyCollection} and HTTP response
   */

  ConfigServiceApi.prototype.listVersioningPoliciesWithHttpInfo = function listVersioningPoliciesWithHttpInfo() {
    var postBody = null;

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestVersioningPolicyCollection2['default'];

    return this.apiClient.callApi('/config/versioning', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List all defined versioning policies
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestVersioningPolicyCollection}
   */

  ConfigServiceApi.prototype.listVersioningPolicies = function listVersioningPolicies() {
    return this.listVersioningPoliciesWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List all defined virtual nodes
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestNodesCollection} and HTTP response
   */

  ConfigServiceApi.prototype.listVirtualNodesWithHttpInfo = function listVirtualNodesWithHttpInfo() {
    var postBody = null;

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestNodesCollection2['default'];

    return this.apiClient.callApi('/config/virtualnodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List all defined virtual nodes
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestNodesCollection}
   */

  ConfigServiceApi.prototype.listVirtualNodes = function listVirtualNodes() {
    return this.listVirtualNodesWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Publish available REST APIs
   * @param {Object} opts Optional parameters
   * @param {String} opts.endpointType 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestOpenApiResponse} and HTTP response
   */

  ConfigServiceApi.prototype.openApiDiscoveryWithHttpInfo = function openApiDiscoveryWithHttpInfo(opts) {
    opts = opts || {};
    var postBody = null;

    var pathParams = {};
    var queryParams = {
      'EndpointType': opts['endpointType']
    };
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestOpenApiResponse2['default'];

    return this.apiClient.callApi('/config/discovery/openapi', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Publish available REST APIs
   * @param {Object} opts Optional parameters
   * @param {String} opts.endpointType 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestOpenApiResponse}
   */

  ConfigServiceApi.prototype.openApiDiscovery = function openApiDiscovery(opts) {
    return this.openApiDiscoveryWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Generic config Put, using a full path in the config tree
   * @param {String} fullPath 
   * @param {module:model/RestConfiguration} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestConfiguration} and HTTP response
   */

  ConfigServiceApi.prototype.putConfigWithHttpInfo = function putConfigWithHttpInfo(fullPath, body) {
    var postBody = body;

    // verify the required parameter 'fullPath' is set
    if (fullPath === undefined || fullPath === null) {
      throw new Error("Missing the required parameter 'fullPath' when calling putConfig");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling putConfig");
    }

    var pathParams = {
      'FullPath': fullPath
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestConfiguration2['default'];

    return this.apiClient.callApi('/config/{FullPath}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Generic config Put, using a full path in the config tree
   * @param {String} fullPath 
   * @param {module:model/RestConfiguration} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestConfiguration}
   */

  ConfigServiceApi.prototype.putConfig = function putConfig(fullPath, body) {
    return this.putConfigWithHttpInfo(fullPath, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Create or update a datasource
   * @param {String} name 
   * @param {module:model/ObjectDataSource} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectDataSource} and HTTP response
   */

  ConfigServiceApi.prototype.putDataSourceWithHttpInfo = function putDataSourceWithHttpInfo(name, body) {
    var postBody = body;

    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error("Missing the required parameter 'name' when calling putDataSource");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling putDataSource");
    }

    var pathParams = {
      'Name': name
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelObjectDataSource2['default'];

    return this.apiClient.callApi('/config/datasource/{Name}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Create or update a datasource
   * @param {String} name 
   * @param {module:model/ObjectDataSource} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectDataSource}
   */

  ConfigServiceApi.prototype.putDataSource = function putDataSource(name, body) {
    return this.putDataSourceWithHttpInfo(name, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return ConfigServiceApi;
})();

exports['default'] = ConfigServiceApi;
module.exports = exports['default'];

/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IdmUser from '../model/IdmUser';
import RestDeleteResponse from '../model/RestDeleteResponse';
import RestSearchUserRequest from '../model/RestSearchUserRequest';
import RestUsersCollection from '../model/RestUsersCollection';

/**
* UserService service.
* @module api/UserServiceApi
* @version 1.0
*/
export default class UserServiceApi {

    /**
    * Constructs a new UserServiceApi. 
    * @alias module:api/UserServiceApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a user
     * @param {String} login 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDeleteResponse} and HTTP response
     */
    deleteUserWithHttpInfo(login) {
      let postBody = null;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling deleteUser");
      }


      let pathParams = {
        'Login': login
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestDeleteResponse;

      return this.apiClient.callApi(
        '/user/{Login}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a user
     * @param {String} login 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDeleteResponse}
     */
    deleteUser(login) {
      return this.deleteUserWithHttpInfo(login)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user by login
     * @param {String} login 
     * @param {Object} opts Optional parameters
     * @param {String} opts.uuid User unique identifier.
     * @param {String} opts.groupPath Path to the parent group.
     * @param {String} opts.password Password can be passed to be updated (but never read back), field is empty for groups.
     * @param {String} opts.oldPassword OldPassword must be set when a user updates her own password.
     * @param {Boolean} opts.isGroup Whether this object is a group or a user.
     * @param {String} opts.groupLabel Label of the group, field is empty for users.
     * @param {Boolean} opts.policiesContextEditable Context-resolved to quickly check if user is editable or not.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmUser} and HTTP response
     */
    getUserWithHttpInfo(login, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling getUser");
      }


      let pathParams = {
        'Login': login
      };
      let queryParams = {
        'Uuid': opts['uuid'],
        'GroupPath': opts['groupPath'],
        'Password': opts['password'],
        'OldPassword': opts['oldPassword'],
        'IsGroup': opts['isGroup'],
        'GroupLabel': opts['groupLabel'],
        'PoliciesContextEditable': opts['policiesContextEditable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdmUser;

      return this.apiClient.callApi(
        '/user/{Login}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a user by login
     * @param {String} login 
     * @param {Object} opts Optional parameters
     * @param {String} opts.uuid User unique identifier.
     * @param {String} opts.groupPath Path to the parent group.
     * @param {String} opts.password Password can be passed to be updated (but never read back), field is empty for groups.
     * @param {String} opts.oldPassword OldPassword must be set when a user updates her own password.
     * @param {Boolean} opts.isGroup Whether this object is a group or a user.
     * @param {String} opts.groupLabel Label of the group, field is empty for users.
     * @param {Boolean} opts.policiesContextEditable Context-resolved to quickly check if user is editable or not.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmUser}
     */
    getUser(login, opts) {
      return this.getUserWithHttpInfo(login, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Just save a user roles, without other datas
     * @param {String} login 
     * @param {module:model/IdmUser} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmUser} and HTTP response
     */
    putRolesWithHttpInfo(login, body) {
      let postBody = body;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling putRoles");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putRoles");
      }


      let pathParams = {
        'Login': login
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdmUser;

      return this.apiClient.callApi(
        '/user/roles/{Login}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Just save a user roles, without other datas
     * @param {String} login 
     * @param {module:model/IdmUser} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmUser}
     */
    putRoles(login, body) {
      return this.putRolesWithHttpInfo(login, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create or update a user
     * @param {String} login 
     * @param {module:model/IdmUser} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdmUser} and HTTP response
     */
    putUserWithHttpInfo(login, body) {
      let postBody = body;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling putUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putUser");
      }


      let pathParams = {
        'Login': login
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdmUser;

      return this.apiClient.callApi(
        '/user/{Login}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create or update a user
     * @param {String} login 
     * @param {module:model/IdmUser} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdmUser}
     */
    putUser(login, body) {
      return this.putUserWithHttpInfo(login, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List/Search users
     * @param {module:model/RestSearchUserRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestUsersCollection} and HTTP response
     */
    searchUsersWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchUsers");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestUsersCollection;

      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List/Search users
     * @param {module:model/RestSearchUserRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestUsersCollection}
     */
    searchUsers(body) {
      return this.searchUsersWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

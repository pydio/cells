// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PeoplePatch PeoplePatch
//
// a key / value tuple describing which parameter to patch
// swagger:model PeoplePatch
type PeoplePatch struct {

	// parameter name
	// Enum: [groupLabel userPass userProfile userLock userRoles userAddRole userRemoveRole userPreferences]
	ParameterName string `json:"parameterName,omitempty"`

	// parameter value
	ParameterValue string `json:"parameterValue,omitempty"`

	// resource type
	// Enum: [user group]
	ResourceType string `json:"resourceType,omitempty"`
}

// Validate validates this people patch
func (m *PeoplePatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var peoplePatchTypeParameterNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["groupLabel","userPass","userProfile","userLock","userRoles","userAddRole","userRemoveRole","userPreferences"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		peoplePatchTypeParameterNamePropEnum = append(peoplePatchTypeParameterNamePropEnum, v)
	}
}

const (

	// PeoplePatchParameterNameGroupLabel captures enum value "groupLabel"
	PeoplePatchParameterNameGroupLabel string = "groupLabel"

	// PeoplePatchParameterNameUserPass captures enum value "userPass"
	PeoplePatchParameterNameUserPass string = "userPass"

	// PeoplePatchParameterNameUserProfile captures enum value "userProfile"
	PeoplePatchParameterNameUserProfile string = "userProfile"

	// PeoplePatchParameterNameUserLock captures enum value "userLock"
	PeoplePatchParameterNameUserLock string = "userLock"

	// PeoplePatchParameterNameUserRoles captures enum value "userRoles"
	PeoplePatchParameterNameUserRoles string = "userRoles"

	// PeoplePatchParameterNameUserAddRole captures enum value "userAddRole"
	PeoplePatchParameterNameUserAddRole string = "userAddRole"

	// PeoplePatchParameterNameUserRemoveRole captures enum value "userRemoveRole"
	PeoplePatchParameterNameUserRemoveRole string = "userRemoveRole"

	// PeoplePatchParameterNameUserPreferences captures enum value "userPreferences"
	PeoplePatchParameterNameUserPreferences string = "userPreferences"
)

// prop value enum
func (m *PeoplePatch) validateParameterNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, peoplePatchTypeParameterNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PeoplePatch) validateParameterName(formats strfmt.Registry) error {

	if swag.IsZero(m.ParameterName) { // not required
		return nil
	}

	// value enum
	if err := m.validateParameterNameEnum("parameterName", "body", m.ParameterName); err != nil {
		return err
	}

	return nil
}

var peoplePatchTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","group"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		peoplePatchTypeResourceTypePropEnum = append(peoplePatchTypeResourceTypePropEnum, v)
	}
}

const (

	// PeoplePatchResourceTypeUser captures enum value "user"
	PeoplePatchResourceTypeUser string = "user"

	// PeoplePatchResourceTypeGroup captures enum value "group"
	PeoplePatchResourceTypeGroup string = "group"
)

// prop value enum
func (m *PeoplePatch) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, peoplePatchTypeResourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PeoplePatch) validateResourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceTypeEnum("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeoplePatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeoplePatch) UnmarshalBinary(b []byte) error {
	var res PeoplePatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

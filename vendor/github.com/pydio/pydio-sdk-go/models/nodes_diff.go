// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NodesDiff NodesDiff
//
// Description of node removed / added / updated in the backend
// swagger:model NodesDiff
type NodesDiff struct {

	// add
	Add []*Node `json:"add"`

	// remove
	Remove []string `json:"remove"`

	// Nodes may have an additional attribute original_path
	Update []*Node `json:"update"`
}

// Validate validates this nodes diff
func (m *NodesDiff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodesDiff) validateAdd(formats strfmt.Registry) error {

	if swag.IsZero(m.Add) { // not required
		return nil
	}

	for i := 0; i < len(m.Add); i++ {
		if swag.IsZero(m.Add[i]) { // not required
			continue
		}

		if m.Add[i] != nil {
			if err := m.Add[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("add" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodesDiff) validateUpdate(formats strfmt.Registry) error {

	if swag.IsZero(m.Update) { // not required
		return nil
	}

	for i := 0; i < len(m.Update); i++ {
		if swag.IsZero(m.Update[i]) { // not required
			continue
		}

		if m.Update[i] != nil {
			if err := m.Update[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("update" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodesDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodesDiff) UnmarshalBinary(b []byte) error {
	var res NodesDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

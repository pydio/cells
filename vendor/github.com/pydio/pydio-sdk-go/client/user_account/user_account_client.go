// Code generated by go-swagger; DO NOT EDIT.

package user_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UserInfo List accessible workspace for currently logged user. Alias for /state/?xPath=user/repositories

*/
func (a *Client) UserInfo(params *UserInfoParams, authInfo runtime.ClientAuthInfoWriter) (*UserInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userInfo",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserInfoOK), nil

}

/*
UserPreferences List accessible workspace for currently logged user. Alias for /state/?xPath=user/preferences

*/
func (a *Client) UserPreferences(params *UserPreferencesParams, authInfo runtime.ClientAuthInfoWriter) (*UserPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userPreferences",
		Method:             "GET",
		PathPattern:        "/user/preferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserPreferencesOK), nil

}

/*
UserWorkspaces List accessible workspace for currently logged user. Alias for /state/?xPath=user/repositories

*/
func (a *Client) UserWorkspaces(params *UserWorkspacesParams, authInfo runtime.ClientAuthInfoWriter) (*UserWorkspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserWorkspacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userWorkspaces",
		Method:             "GET",
		PathPattern:        "/user/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserWorkspacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserWorkspacesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

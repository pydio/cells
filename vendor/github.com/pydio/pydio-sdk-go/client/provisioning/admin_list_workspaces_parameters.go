// Code generated by go-swagger; DO NOT EDIT.

package provisioning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAdminListWorkspacesParams creates a new AdminListWorkspacesParams object
// with the default values initialized.
func NewAdminListWorkspacesParams() *AdminListWorkspacesParams {
	var ()
	return &AdminListWorkspacesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAdminListWorkspacesParamsWithTimeout creates a new AdminListWorkspacesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAdminListWorkspacesParamsWithTimeout(timeout time.Duration) *AdminListWorkspacesParams {
	var ()
	return &AdminListWorkspacesParams{

		timeout: timeout,
	}
}

// NewAdminListWorkspacesParamsWithContext creates a new AdminListWorkspacesParams object
// with the default values initialized, and the ability to set a context for a request
func NewAdminListWorkspacesParamsWithContext(ctx context.Context) *AdminListWorkspacesParams {
	var ()
	return &AdminListWorkspacesParams{

		Context: ctx,
	}
}

// NewAdminListWorkspacesParamsWithHTTPClient creates a new AdminListWorkspacesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAdminListWorkspacesParamsWithHTTPClient(client *http.Client) *AdminListWorkspacesParams {
	var ()
	return &AdminListWorkspacesParams{
		HTTPClient: client,
	}
}

/*AdminListWorkspacesParams contains all the parameters to send to the API endpoint
for the admin list workspaces operation typically these are written to a http.Request
*/
type AdminListWorkspacesParams struct {

	/*Format
	  Format produced in output (defaults to xml)

	*/
	Format *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the admin list workspaces params
func (o *AdminListWorkspacesParams) WithTimeout(timeout time.Duration) *AdminListWorkspacesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the admin list workspaces params
func (o *AdminListWorkspacesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the admin list workspaces params
func (o *AdminListWorkspacesParams) WithContext(ctx context.Context) *AdminListWorkspacesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the admin list workspaces params
func (o *AdminListWorkspacesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the admin list workspaces params
func (o *AdminListWorkspacesParams) WithHTTPClient(client *http.Client) *AdminListWorkspacesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the admin list workspaces params
func (o *AdminListWorkspacesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFormat adds the format to the admin list workspaces params
func (o *AdminListWorkspacesParams) WithFormat(format *string) *AdminListWorkspacesParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the admin list workspaces params
func (o *AdminListWorkspacesParams) SetFormat(format *string) {
	o.Format = format
}

// WriteToRequest writes these params to a swagger request
func (o *AdminListWorkspacesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Format != nil {

		// query param format
		var qrFormat string
		if o.Format != nil {
			qrFormat = *o.Format
		}
		qFormat := qrFormat
		if qFormat != "" {
			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

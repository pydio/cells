// Code generated by go-swagger; DO NOT EDIT.

package workspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetWorkspaceInfoParams creates a new GetWorkspaceInfoParams object
// with the default values initialized.
func NewGetWorkspaceInfoParams() *GetWorkspaceInfoParams {
	var ()
	return &GetWorkspaceInfoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkspaceInfoParamsWithTimeout creates a new GetWorkspaceInfoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetWorkspaceInfoParamsWithTimeout(timeout time.Duration) *GetWorkspaceInfoParams {
	var ()
	return &GetWorkspaceInfoParams{

		timeout: timeout,
	}
}

// NewGetWorkspaceInfoParamsWithContext creates a new GetWorkspaceInfoParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetWorkspaceInfoParamsWithContext(ctx context.Context) *GetWorkspaceInfoParams {
	var ()
	return &GetWorkspaceInfoParams{

		Context: ctx,
	}
}

// NewGetWorkspaceInfoParamsWithHTTPClient creates a new GetWorkspaceInfoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetWorkspaceInfoParamsWithHTTPClient(client *http.Client) *GetWorkspaceInfoParams {
	var ()
	return &GetWorkspaceInfoParams{
		HTTPClient: client,
	}
}

/*GetWorkspaceInfoParams contains all the parameters to send to the API endpoint
for the get workspace info operation typically these are written to a http.Request
*/
type GetWorkspaceInfoParams struct {

	/*XPydioWSInfo*/
	XPydioWSInfo string
	/*WorkspaceID
	  Id or Alias of the workspace

	*/
	WorkspaceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get workspace info params
func (o *GetWorkspaceInfoParams) WithTimeout(timeout time.Duration) *GetWorkspaceInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get workspace info params
func (o *GetWorkspaceInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get workspace info params
func (o *GetWorkspaceInfoParams) WithContext(ctx context.Context) *GetWorkspaceInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get workspace info params
func (o *GetWorkspaceInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get workspace info params
func (o *GetWorkspaceInfoParams) WithHTTPClient(client *http.Client) *GetWorkspaceInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get workspace info params
func (o *GetWorkspaceInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXPydioWSInfo adds the xPydioWSInfo to the get workspace info params
func (o *GetWorkspaceInfoParams) WithXPydioWSInfo(xPydioWSInfo string) *GetWorkspaceInfoParams {
	o.SetXPydioWSInfo(xPydioWSInfo)
	return o
}

// SetXPydioWSInfo adds the xPydioWSInfo to the get workspace info params
func (o *GetWorkspaceInfoParams) SetXPydioWSInfo(xPydioWSInfo string) {
	o.XPydioWSInfo = xPydioWSInfo
}

// WithWorkspaceID adds the workspaceID to the get workspace info params
func (o *GetWorkspaceInfoParams) WithWorkspaceID(workspaceID string) *GetWorkspaceInfoParams {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the get workspace info params
func (o *GetWorkspaceInfoParams) SetWorkspaceID(workspaceID string) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkspaceInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Pydio-WS-Info
	if err := r.SetHeaderParam("X-Pydio-WS-Info", o.XPydioWSInfo); err != nil {
		return err
	}

	// path param workspaceId
	if err := r.SetPathParam("workspaceId", o.WorkspaceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

# Default values for cells.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

image:
  repository: pydio/cells
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
##
persistence:
  ## @param primary.persistence.enabled Enable persistence on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
  ##
  enabled: true
  ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL primary replicas
  ## NOTE: When it's set the rest of persistence parameters are ignored
  ##
  existingClaim: ""
  ## @param primary.persistence.subPath The name of a volume's sub path to mount for persistence
  ##
  subPath: ""
  ## @param primary.persistence.storageClass MySQL primary persistent volume storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param primary.persistence.annotations MySQL primary persistent volume claim annotations
  ##
  annotations: {
    helm.sh/resource-policy: "keep"
  }
  ## @param primary.persistence.accessModes MySQL primary persistent volume access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param primary.persistence.size MySQL primary persistent volume size
  ##
  size: 1Gi
  ## @param primary.persistence.selector Selector to match an existing Persistent Volume
  ## selector:
  ##   matchLabels:
  ##     app: my-app
  ##
  selector: {}

## Primary Persistent Volume Claim Retention Policy
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
##
persistentVolumeClaimRetentionPolicy:
  ## @param primary.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for Primary StatefulSet
  ##
  enabled: true
  ## @param primary.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
  ##
  whenScaled: Retain
  ## @param primary.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
  ##
  whenDeleted: Delete

serviceAccount:
  create: true
  annotations: {}
  name: "app"

podAnnotations: {
}

podSecurityContext: {}

securityContext: {}

service:
  type: NodePort
  port: 8080
  discoveryPort: 8002
  binds:

    # Set values here if you want to bind the port elsewhere
  reverseproxyurl:
  tlsconfig:

  customconfigs: {
    # Initial license
    "defaults/license/data": "FAKE",

    # Creates a kind-of sticky session for grpc requests, priority is given to local grpc servers for any outgoing request going to grpc
    #"cluster/clients/grpc/loadBalancingStrategies[0]/name": "priority-local",

    #
    "frontend/plugin/core.pydio/APPLICATION_TITLE": "My Pydio Cells Cluster"
  }

## @section TLS/SSL parameters
##
## @param tls.enabled Enable TLS in MySQL
## @param tls.existingSecret Existing secret that contains TLS certificates
## @param tls.certFilename The secret key from the existingSecret if 'cert' key different from the default (tls.crt)
## @param tls.certKeyFilename The secret key from the existingSecret if 'key' key different from the default (tls.key)
## @param tls.certCAFilename The secret key from the existingSecret if 'ca' key different from the default (tls.crt)
## @param tls.ca CA certificate for TLS. Ignored if `tls.existingSecret` is set
## @param tls.cert TLS certificate for MySQL. Ignored if `tls.existingSecret` is set
## @param tls.key TLS key for MySQL. Ignored if `tls.existingSecret` is set
##
tls:
  enabled: false
  selfSigned: true
  existingSecret: ""
  server:
    existingSecret: cells-crt
    cert: tls.crt
    key: tls.key
  client:
    existingSecret: cells-client-crt
    cert: tls.crt
    key: tls.key
  ca:
    existingSecret: cells-crt
    cert: ca.crt

  ## @param tls.autoGenerated.enabled Enable automatic generation of certificates for TLS
  ## @param tls.autoGenerated.engine Mechanism to generate the certificates (allowed values: helm, cert-manager)
  autoGenerated:
    enabled: true
    engine: helm
    ## @param tls.autoGenerated.certManager.existingIssuer The name of an existing Issuer to use for generating the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.existingIssuerKind Existing Issuer kind, defaults to Issuer (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.keyAlgorithm Key algorithm for the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.keySize Key size for the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.duration Duration for the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.renewBefore Renewal period for the certificates (only for `cert-manager` engine)
    certManager:
      existingIssuer: ""
      existingIssuerKind: ""
      keySize: 2048
      keyAlgorithm: RSA
      duration: 2160h
      renewBefore: 360h

ingress:
  ## @param ingress.enabled Enable ingress controller resource for Cells
  ##
  enabled: false
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.ingressClassName IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster.
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: ""
  ## @param ingress.hostname Default host for the ingress resource
  ##
  hostname: cells.local
  ## @param ingress.path The Path to Pydio Cells&reg;. You may need to set this to '/*' in order to use this with ALB ingress controllers.
  ##
  path: /
  ## @param ingress.pathType Ingress path type
  ##
  pathType: Prefix
  ## @param ingress.servicePort Service port to be used
  ## Default is http. Alternative is https.
  ##
  servicePort: http
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations: {
#    "acme.cert-manager.io/http01-edit-in-place": "true",
#    "kubernetes.io/ingress.class": "nginx",
#    "cert-manager.io/cluster-issuer": "letsencrypt",
#    "nginx.ingress.kubernetes.io/proxy-body-size": "0"
  }
  ## @param ingress.tls Enable TLS configuration for the hostname defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## e.g:
  ## extraHosts:
  ##   - name: cells.local
  ##     path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths Any additional paths that may need to be added to the ingress under the main host
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## e.g:
  ## extraTls:
  ## - hosts:
  ##     - cells.local
  ##   secretName: cells.local-tls
  ##
  extraTls: []
  ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate are expected in PEM format
  ## name should line up with a secretName set further up
  ##
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ##
  ## Example
  ## secrets:
  ##   - name: cells.local-tls
  ##     key: ""
  ##     certificate: ""
  ##
  secrets: []
  ## @param ingress.extraRules Additional rules to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
  ## e.g:
  ## extraRules:
  ## - host: example.local
  ##     http:
  ##       path: /
  ##       backend:
  ##         service:
  ##           name: example-svc
  ##           port:
  ##             name: http
  ##
  extraRules: []

ingress-nginx:
  controller:
    admissionWebhooks:
      enabled: false
    hostPort:
      enabled: true
    ingressClassResource:
      default: true
      enabled: true
    kind: DaemonSet
    service:
      type: ClusterIP

resources: {
}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

#------------------------------
# Dependency settings
#------------------------------
mariadb:
  enabled: false
  volumePermissions:
    enabled: true
  networkPolicy:
    enabled: false

# Legacy - do not use - use mariadb or externalDatabase instead
mariadb-galera:
  enabled: false


redis:
  enabled: false
  volumePermissions:
    enabled: true
  auth:
    enabled: false

nats:
  enabled: false
  auth:
    enabled: false
  volumePermissions:
    enabled: true

etcd:
  enabled: false
  auth:
    rbac:
      create: false
    peer:
      secureTransport: false
      useAutoTLS: false
    client:
      secureTransport: false
      enableAuthentication: false
      existingSecret: ""
      certFilename: "tls.crt"
      certKeyFilename: "tls.key"
      caFilename: "ca.crt"

  preUpgradeJob:
    enabled: true
    annotations: {
      "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
    }

  volumePermissions:
    enabled: true

  persistence:
    enabled: true

  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete

minio:
  enabled: false
  defaultBuckets: "thumbnails pydiods1 personal versions cellsdata binaries"

  volumePermissions:
    enabled: true

mongodb:
  enabled: false
  auth: 
    enabled: false
  volumePermissions:
    enabled: true

vault:
  enabled: false
  injector:
    annotations: {
      "helm.sh/hook": "pre-install",
      "helm.sh/hook-weight": "-5"
    }
    webhook:
      annotations: {
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-weight": "-5"
      }
      failurePolicy: Fail
      namespaceSelector:
        matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["vault","kube-system","kube-public","kube-node-lease"]
  server:
    annotations: {
      "helm.sh/hook": "pre-install",
      "helm.sh/hook-weight": "-5"
    }
    dataStorage:
      enabled: true
    extraVolumes:
    - type: configMap
      name: cells-vault
    postStart:
    - "/bin/sh"
    - "-c"
    - "sleep 5 && cp /vault/userconfig/cells-vault/bootstrap.sh /tmp/bootstrap.sh && chmod +x /tmp/bootstrap.sh && /tmp/bootstrap.sh"
  statefulset:
    annotations: {
      "helm.sh/hook": "pre-install",
      "helm.sh/hook-weight": "-5"
    }

cert-manager:
  enabled: false

convertTools:
  enabled: false
  replicaCount: 2
  image:
    repository: pydio/cells-convert-tools
    tag: 1.0.3
    pullPolicy: Always
  service:
    port: 9997
  resources:
    requests:
      cpu: "1000m"
      memory: "1Gi"
    limits:
      cpu: "2000m"
      memory: "2Gi"

externalSQLDatabase:
  enabled: true
  host: mariadb.cells.svc.cluster.local
  port: 3306
  name: cells
  params:
    parseTime: "true"
    prefix: "{{ .Meta.prefix }}"
    policies: "{{.Meta.policies}}"
    singular: "{{.Meta.singular}}"
  tls:
    enabled: false
    autoGenerated: false
  auth:
    enabled: true
    user: "root"
    password: ""
    existingSecret: "mariadb"
    existingSecretUsernameKey: ""
    existingSecretPasswordKey: "mariadb-root-password"

externalCache:
  enabled: false
  host: redis-master.cells.svc.cluster.local
  port: 6379
  tls:
    enabled: false
    client:
      existingSecret: "redis-crt"
      cert: "tls.crt"
      key: "tls.key"
    ca:
      existingSecret: "redis-crt"
      cert: "ca.crt"
  auth:
    enabled: true
    user: "default"
    password: ""
    existingSecret: "redis"
    existingSecretUsernameKey: ""
    existingSecretPasswordKey: "redis-password"

externalDiscovery:
  enabled: false
  host: etcd.cells.svc.cluster.local
  port: 2379
  tls:
    enabled: false
    autoGenerated: false
    client:
      existingSecret: ""
      cert: "tls.crt"
      key: "tls.key"
    ca:
      existingSecret: ""
      cert: "ca.crt"
  auth:
    enabled: true
    user: "root"
    password: ""
    existingSecret: "etcd"
    existingSecretPasswordKey: "etcd-root-password"

externalS3:
  enabled: false
  host: minio
  port: 9000
  customRegion: "us-west-1"
  ds:
    pydiods1: "pydiods1"
    personal: "personal"
    cellsdata: "cellsdata"
    binaries: "binaries"
    thumbnails: "thumbnails"
    versions: "versions"
  tls:
    enabled: false
    client:
      existingSecret: "minio-crt"
      cert: "tls.crt"
      key: "tls.key"
    ca:
      existingSecret: "minio-crt"
      cert: "ca.crt"
  auth:
    enabled: false
    user: ""
    password: ""
    existingSecret: "minio"
    existingSecretUsernameKey: "root-user"
    existingSecretPasswordKey: "root-password"

externalBroker:
  enabled: false
  host: nats.cells.svc.cluster.local
  port: 4222
  auth:
    enabled: true
    user: "nats"
    password: ""
    existingSecret: nats
    existingSecretServerConf: nats-server.conf
    existingSecretUsernameKey: ""
    existingSecretPasswordKey: ""
  tls:
    enabled: false
    autoGenerated: false
    client:
      existingSecret: "nats-client-crt"
      cert: "tls.crt"
      key: "tls.key"
    ca:
      existingSecret: "nats-ca-crt"
      cert: "tls.crt"

externalNoSQLDatabase:
  enabled: false
  host: mongo.cells.svc.cluster.local
  port: 27017
  tls:
    enabled: false
    autoGenerated: false
  auth:
    enabled: false
    user: "root"
    password: ""
    existingSecret: mongodb
    existingSecretUsernameKey: ""
    existingSecretPasswordKey: "mongodb-root-password"

externalVault:
  enabled: true
  host: vault-server
  port: 8200
  tls:
    enabled: false
    autoGenerated: false
  auth:
    enabled: false
  test:
    enabled: false

externalIngress:
  enabled: false
  hostname: cluster.pydiocells.com
  ingressClassName: nginx
  path: /
  pathType: Prefix
  tls:
    enabled: true
    selfSigned: true

# Default values for cells.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: pydio/cells
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local

serviceAccount:
  create: true
  annotations: {}
  name: "app"

podAnnotations: {
  "vault.hashicorp.com/agent-inject": "true",
  "vault.hashicorp.com/role": "app",
  "vault.hashicorp.com/agent-init-first": "true",
  "vault.hashicorp.com/agent-inject-token": "true"
}

podSecurityContext: {}

securityContext: {}

service:
  type: NodePort
  port: 8080
  discoveryPort: 8002
  binds:
    # Set values here if you want to bind the port elsewhere
  reverseproxyurl:
  tlsconfig:

  customconfigs: {
    # Initial license
    "defaults/license/data": "FAKE",

    # Creates a kind-of sticky session for grpc requests, priority is given to local grpc servers for any outgoing request going to grpc
    #"cluster/clients/grpc/loadBalancingStrategies[0]/name": "priority-local",

    #
    "frontend/plugin/core.pydio/APPLICATION_TITLE": "My Pydio Cells Cluster"
  }


## Enable tls in front of Cells containers.
##
tls:
  ## @param tls.enabled Enable tls in front of the container
  ##
  enabled: false
  ## @param tls.autoGenerated Generate automatically self-signed TLS certificates
  ##
  autoGenerated: false
  ## @param tls.existingSecret Name of an existing secret holding the certificate information
  ##
  existingSecret: ""

  ## @param tls.mountPath The mount path where the secret will be located
  ## Custom mount path where the certificates will be located, if empty will default to /certs
  mountPath: ""

ingress:
  ## @param ingress.enabled Enable ingress controller resource for Cells
  ##
  enabled: false
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.ingressClassName IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster.
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: ""
  ## @param ingress.hostname Default host for the ingress resource
  ##
  hostname: cells.local
  ## @param ingress.path The Path to Pydio Cells&reg;. You may need to set this to '/*' in order to use this with ALB ingress controllers.
  ##
  path: /
  ## @param ingress.pathType Ingress path type
  ##
  pathType: Prefix
  ## @param ingress.servicePort Service port to be used
  ## Default is http. Alternative is https.
  ##
  servicePort: http
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations: {
    "acme.cert-manager.io/http01-edit-in-place": "true",
    "kubernetes.io/ingress.class": "nginx",
    "cert-manager.io/cluster-issuer": "letsencrypt",
    "nginx.ingress.kubernetes.io/proxy-body-size": "0"
  }
  ## @param ingress.tls Enable TLS configuration for the hostname defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## e.g:
  ## extraHosts:
  ##   - name: cells.local
  ##     path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths Any additional paths that may need to be added to the ingress under the main host
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## e.g:
  ## extraTls:
  ## - hosts:
  ##     - cells.local
  ##   secretName: cells.local-tls
  ##
  extraTls: []
  ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate are expected in PEM format
  ## name should line up with a secretName set further up
  ##
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ##
  ## Example
  ## secrets:
  ##   - name: cells.local-tls
  ##     key: ""
  ##     certificate: ""
  ##
  secrets: []
  ## @param ingress.extraRules Additional rules to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
  ## e.g:
  ## extraRules:
  ## - host: example.local
  ##     http:
  ##       path: /
  ##       backend:
  ##         service:
  ##           name: example-svc
  ##           port:
  ##             name: http
  ##
  extraRules: []
  clusterissuer:
    ## @param ingress.clusterissuer.enabled Enable clusterissuer resource for Cells
    ##
    enabled: false
    ## @param ingress.clusterissuer.server Default server for the clusterissuer resource
    ##
    server: "https://acme-staging-v02.api.letsencrypt.org/directory"
    ## @param ingress.clusterissuer.email Email for the clusterissuer resource
    ##
    email: test@cells.com

ingress-nginx:
  controller:
    admissionWebhooks:
      enabled: false
    hostPort:
      enabled: true
    ingressClassResource:
      default: true
      enabled: true
    kind: DaemonSet
    service:
      type: ClusterIP

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

#------------------------------
# Dependency settings
#------------------------------
cert-manager:
  enabled: true
  useNewInstallation: false # Set to true to use cert-manager chart

nginx:
  enabled: false
  useNewInstallation: false # Set to true to use nginx chart

mariadb:
  useNewInstallation: false # Set to true to use MariaDB chart
  galera:
    enabled: false # Set to true to enable MariaDB Galera
    useNewInstallation: false # Set to true to use MariaDB chart
  host: mariadb-mariadb-galera.database.svc.cluster.local  # Provide the existing MariaDB host if mariadb.enabled is false
  port: 3306        # Provide the existing MariaDB port if mariadb.enabled is false
  database: cells   # Provide the existing database name if mariadb.enabled is false
  username: pydio    # Provide the existing database username if mariadb.enabled is false
  password: password         # Provide the existing database password if mariadb.enabled is false
  volumePermissions:
    enabled: true
  tls:
    enabled: false

redis:
  enabled: false # Set to true to enable Redis
  useNewInstallation: false  # Set to true to use Redis chart
  host: localhost   # Provide the existing redis host if redis.enabled is false
  port: 6379 # Provide the existing redis port if redis.enabled is false
  password: # Provide the existing redis password if redis.enabled is false
  volumePermissions:
    enabled: true
  auth:
    enabled: false

nats:
  enabled: false # Set to true to enable nats
  useNewInstallation: false  # Set to true to use nats chart
  auth:
    enabled: false
  volumePermissions:
    enabled: true

etcd:
  enabled: false # Set to true to enable etcd
  useNewInstallation: false  # Set to true to use etcd chart
  host:
  service:
    ports:
      client:
      peer:

  commonAnnotations: {
    "helm.sh/hook": "pre-install",
    "helm.sh/hook-weight": "-2"
  }
  auth:
    rbac:
      create: false
    peer:
      secureTransport: false
      useAutoTLS: false
    client:
      secureTransport: false
      enableAuthentication: false
      existingSecret: "etcd-client-certs"
      certFilename: "tls.crt"
      certKeyFilename: "tls.key"
      caFilename: "ca.crt"

  volumePermissions:
    enabled: true

minio:
  enabled: false # Set to true to enable minio
  useNewInstallation: false  # Set to true to use minio chart
  defaultBuckets: "thumbnails pydiods1 personal versions cellsdata binaries"

  volumePermissions:
    enabled: true

mongodb:
  enabled: false # Set to true to enable mongodb
  useNewInstallation: false  # Set to true to use mongodb chart
  host: localhost   # Provide the existing mongodb host if mongodb.enabled is false
  port: 27017 # Provide the existing mongodb port if mongodb.enabled is false
  auth:
    enabled: false
  volumePermissions:
    enabled: true

vault:
  enabled: false # Set to true to enable vault
  useNewInstallation: false  # Set to true to use vault chart
  injector:
    annotations: {
      "helm.sh/hook": "pre-install",
      "helm.sh/hook-weight": "-5"
    }
    webhook:
      annotations: {
        "helm.sh/hook": "pre-install",
        "helm.sh/hook-weight": "-5"
      }
      failurePolicy: Fail
      namespaceSelector:
        matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["vault","kube-system","kube-public","kube-node-lease"]
  server:
    annotations: {
      "helm.sh/hook": "pre-install",
      "helm.sh/hook-weight": "-5"
    }
    dataStorage:
      mountPath: /tmp/vault/data
    extraVolumes:
    - type: configMap
      name: cells-vault
    postStart:
    - "/bin/sh"
    - "-c"
    - "sleep 5 && cp /vault/userconfig/cells-vault/bootstrap.sh /tmp/bootstrap.sh && chmod +x /tmp/bootstrap.sh && /tmp/bootstrap.sh"
  statefulset:
    annotations: {
      "helm.sh/hook": "pre-install",
      "helm.sh/hook-weight": "-5"
    }
